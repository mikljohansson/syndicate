CREATE SEQUENCE SYND_STORAGE_DEVICE_S01 INCREMENT BY 1 START WITH 1 NOCYCLE CACHE 20 NOORDER;
CREATE SEQUENCE SYND_STORAGE_LOB_S01 INCREMENT BY 1 START WITH 1 NOCYCLE CACHE 20 NOORDER;
CREATE SEQUENCE SYND_STORAGE_NAMESPACE_S01 INCREMENT BY 1 START WITH 1 NOCYCLE CACHE 20 NOORDER;
CREATE SEQUENCE SYND_UNIT_TEST_S01 INCREMENT BY 1 START WITH 1 NOCYCLE CACHE 20 NOORDER;


CREATE TABLE SYND_ACCESS
(
  ROLE  VARCHAR2(64 BYTE),
  NODE  VARCHAR2(64 BYTE),
  PERM  VARCHAR2(64 BYTE)
);


CREATE TABLE SYND_ACCESS_INHERIT
(
  NODE     VARCHAR2(64 BYTE),
  PERM     VARCHAR2(64 BYTE),
  INHERIT  NUMBER(1)                            DEFAULT 1                     NOT NULL
);


CREATE TABLE SYND_ACCESS_ROLE
(
  NODE_ID    VARCHAR2(64 BYTE),
  INFO_HEAD  VARCHAR2(512 BYTE),
  INFO_DESC  VARCHAR2(2000 BYTE)
);


CREATE TABLE SYND_ALIAS
(
  SOURCE        VARCHAR2(1024 BYTE),
  TARGET        VARCHAR2(1024 BYTE),
  FUZZY_SOURCE  VARCHAR2(1024 BYTE)
);


CREATE TABLE SYND_ANSWER_OPTION
(
  ATTEMPT_NODE_ID  VARCHAR2(64 BYTE),
  OPTION_NODE_ID   VARCHAR2(64 BYTE)
);


CREATE TABLE SYND_ANSWER_TEXT
(
  ATTEMPT_NODE_ID   VARCHAR2(64 BYTE),
  QUESTION_NODE_ID  VARCHAR2(64 BYTE),
  INFO_ANSWER       VARCHAR2(4000 BYTE)
);


CREATE TABLE SYND_ATTEMPT
(
  NODE_ID         VARCHAR2(64 BYTE),
  PARENT_NODE_ID  VARCHAR2(64 BYTE)             NOT NULL,
  CLIENT_NODE_ID  VARCHAR2(64 BYTE),
  TS_CREATE       NUMBER(11),
  INFO_CORRECT    NUMBER(11)                    DEFAULT 0                     NOT NULL,
  INFO_ANSWERS    NUMBER(11)                    DEFAULT 0                     NOT NULL
);


CREATE TABLE SYND_ATTEMPT_QUESTIONS
(
  ATTEMPT_NODE_ID   VARCHAR2(64 BYTE),
  QUESTION_NODE_ID  VARCHAR2(64 BYTE),
  INFO_WEIGHT       NUMBER(11)                  DEFAULT 0                     NOT NULL
);


CREATE TABLE SYND_CLASS
(
  NODE_ID          VARCHAR2(64 BYTE)            NOT NULL,
  NAME             VARCHAR2(256 BYTE)           NOT NULL,
  FLAG_LEASE_ONLY  NUMBER(1)                    DEFAULT 0                     NOT NULL
);


CREATE TABLE SYND_CLASS_FIELDS
(
  FIELD_ID       NUMBER(11),
  CLASS_NODE_ID  VARCHAR2(64 BYTE)              NOT NULL,
  INFO_HEAD      VARCHAR2(256 BYTE)             NOT NULL,
  INFO_DATATYPE  VARCHAR2(64 BYTE)              DEFAULT 'string'              NOT NULL
);


CREATE TABLE SYND_CLASS_VALUES
(
  NODE_ID   VARCHAR2(64 BYTE)                   NOT NULL,
  FIELD_ID  NUMBER(11)                          NOT NULL,
  VALUE     VARCHAR2(256 BYTE)
);


CREATE TABLE SYND_COMMENT
(
  NODE_ID         VARCHAR2(64 BYTE),
  PARENT_NODE_ID  VARCHAR2(255 BYTE)            NOT NULL,
  CLIENT_NODE_ID  VARCHAR2(255 BYTE),
  CLIENT_NAME     VARCHAR2(255 BYTE),
  CLIENT_HOST     VARCHAR2(255 BYTE),
  TS_CREATE       NUMBER(11),
  INFO_HEAD       VARCHAR2(255 BYTE),
  INFO_BODY       CLOB
);


CREATE TABLE SYND_COSTCENTER
(
  NODE_ID            VARCHAR2(64 BYTE),
  PARENT_NODE_ID     VARCHAR2(64 BYTE),
  CREATE_NODE_ID     VARCHAR2(64 BYTE),
  UPDATE_NODE_ID     VARCHAR2(64 BYTE),
  TS_CREATE          NUMBER(11),
  TS_UPDATE          NUMBER(11),
  INFO_HEAD          VARCHAR2(255 BYTE),
  INFO_DESC          CLOB,
  INFO_STREET        VARCHAR2(255 BYTE),
  INFO_ZIP           VARCHAR2(255 BYTE),
  INFO_CITY          VARCHAR2(255 BYTE),
  INFO_COUNTRY       VARCHAR2(255 BYTE),
  INFO_EMAIL         VARCHAR2(255 BYTE),
  INFO_PHONE         VARCHAR2(255 BYTE),
  INFO_FAX           VARCHAR2(255 BYTE),
  INFO_NUMBER        VARCHAR2(255 BYTE),
  INFO_PROJECT_CODE  VARCHAR2(255 BYTE),
  INFO_LIABLE        VARCHAR2(255 BYTE)
);


CREATE TABLE SYND_COURSE
(
  NODE_ID          VARCHAR2(64 BYTE),
  PARENT_NODE_ID   VARCHAR2(64 BYTE),
  CREATE_NODE_ID   VARCHAR2(64 BYTE),
  UPDATE_NODE_ID   VARCHAR2(64 BYTE),
  PAGE_NODE_ID     VARCHAR2(64 BYTE),
  GROUP_NODE_ID    VARCHAR2(64 BYTE),
  TS_CREATE        NUMBER(11),
  TS_UPDATE        NUMBER(11),
  INFO_COURSE_ID   VARCHAR2(64 BYTE),
  INFO_STYLESHEET  CLOB,
  FLAG_STYLESHEET  NUMBER(1)                    DEFAULT 0                     NOT NULL
);


CREATE TABLE SYND_CRYPTO_IDENTITY
(
  KID         NUMBER(11),
  INFO_NAME   VARCHAR2(255 BYTE),
  INFO_EMAIL  VARCHAR2(255 BYTE)
);


CREATE TABLE SYND_CRYPTO_KEY
(
  KID              NUMBER(11),
  PROJECT_NODE_ID  VARCHAR2(64 BYTE)            NOT NULL,
  PROTOCOL         VARCHAR2(32 BYTE)            NOT NULL,
  KEYID            VARCHAR2(255 BYTE),
  FINGERPRINT      VARCHAR2(255 BYTE),
  FLAG_SIGN        NUMBER(1)                    DEFAULT 0                     NOT NULL,
  FLAG_VERIFY      NUMBER(1)                    DEFAULT 0                     NOT NULL,
  FLAG_ENCRYPT     NUMBER(1)                    DEFAULT 0                     NOT NULL,
  FLAG_DECRYPT     NUMBER(1)                    DEFAULT 0                     NOT NULL,
  INFO_TRUST       NUMBER(4)                    DEFAULT 0                     NOT NULL,
  INFO_NAME        VARCHAR2(255 BYTE),
  INFO_EMAIL       VARCHAR2(255 BYTE),
  DATA_CONTENT     CLOB
);


CREATE TABLE SYND_GROUP
(
  NODE_ID         VARCHAR2(64 BYTE),
  PARENT_NODE_ID  VARCHAR2(64 BYTE),
  CREATE_NODE_ID  VARCHAR2(64 BYTE),
  UPDATE_NODE_ID  VARCHAR2(64 BYTE),
  TS_CREATE       NUMBER(11),
  TS_UPDATE       NUMBER(11),
  INFO_HEAD       VARCHAR2(255 BYTE),
  INFO_DESC       VARCHAR2(4000 BYTE),
  INFO_BODY       VARCHAR2(4000 BYTE)
);


CREATE TABLE SYND_INSTANCE
(
  NODE_ID         VARCHAR2(64 BYTE),
  PARENT_NODE_ID  VARCHAR2(64 BYTE),
  CLASS_NODE_ID   VARCHAR2(64 BYTE),
  TS_CREATE       NUMBER(11),
  TS_UPDATE       NUMBER(11)
);


CREATE TABLE SYND_INV_COMPUTER
(
  NODE_ID              VARCHAR2(64 BYTE),
  INFO_MACHINE_NAME    VARCHAR2(512 BYTE),
  INFO_REMOTE_URI      VARCHAR2(512 BYTE),
  INFO_REMOTE_ACTION   VARCHAR2(512 BYTE),
  INFO_REMOTE_METHOD   VARCHAR2(512 BYTE),
  INFO_REMOTE_VERSION  VARCHAR2(10 BYTE),
  INFO_MB_MAKE         VARCHAR2(512 BYTE),
  INFO_MB_BIOS         VARCHAR2(512 BYTE),
  INFO_MB_SERIAL       VARCHAR2(512 BYTE),
  INFO_CPU_DESC        VARCHAR2(512 BYTE),
  INFO_CPU_CLOCK       NUMBER(11),
  INFO_CPU_COUNT       NUMBER(11)               DEFAULT 1,
  INFO_CPU_ID          VARCHAR2(512 BYTE),
  INFO_RAM             NUMBER(11),
  INFO_KEYBOARD        VARCHAR2(512 BYTE),
  DATA_DISK_DRIVES     CLOB,
  DATA_ROM_DRIVES      CLOB,
  DATA_MONITORS        CLOB,
  DATA_SOUND_CARDS     CLOB,
  DATA_GRAPHIC_CARDS   CLOB,
  DATA_NETWORK_CARDS   CLOB
);


CREATE TABLE SYND_INV_CONFIG
(
  NODE_ID         VARCHAR2(64 BYTE),
  PARENT_NODE_ID  VARCHAR2(64 BYTE),
  CREATE_NODE_ID  VARCHAR2(64 BYTE),
  UPDATE_NODE_ID  VARCHAR2(64 BYTE),
  TS_CREATE       NUMBER(11),
  TS_UPDATE       NUMBER(11)
);


CREATE TABLE SYND_INV_FOLDER
(
  NODE_ID           VARCHAR2(64 BYTE),
  CREATE_NODE_ID    VARCHAR2(64 BYTE),
  UPDATE_NODE_ID    VARCHAR2(64 BYTE),
  ACCEPT_CLASS_IDS  VARCHAR2(255 BYTE),
  INFO_HEAD         VARCHAR2(255 BYTE),
  INFO_DESC         VARCHAR2(4000 BYTE),
  INFO_BODY         VARCHAR2(4000 BYTE)
);


CREATE TABLE SYND_INV_INSTALLATION
(
  NODE_ID         VARCHAR2(64 BYTE),
  CREATE_NODE_ID  VARCHAR2(64 BYTE),
  UPDATE_NODE_ID  VARCHAR2(64 BYTE),
  TS_CREATE       NUMBER(11),
  TS_UPDATE       NUMBER(11),
  INFO_NUMBER     VARCHAR2(255 BYTE),
  DATA_FILES      CLOB
);


CREATE TABLE SYND_INV_INTERFACE
(
  NODE_ID          VARCHAR2(64 BYTE),
  PARENT_NODE_ID   VARCHAR2(64 BYTE)            NOT NULL,
  NIC_NODE_ID      VARCHAR2(64 BYTE),
  INFO_HOSTNAME    VARCHAR2(255 BYTE),
  INFO_IP_ADDRESS  VARCHAR2(15 BYTE),
  INFO_IP_ENCODED  NUMBER(11)
);


CREATE TABLE SYND_INV_ITEM
(
  NODE_ID               VARCHAR2(64 BYTE),
  OWNER_NODE_ID         VARCHAR2(64 BYTE),
  INSTALLATION_NODE_ID  VARCHAR2(64 BYTE),
  COSTCENTER_NODE_ID    VARCHAR2(64 BYTE),
  PROJECT_NODE_ID       VARCHAR2(64 BYTE),
  TS_DELIVERY           NUMBER(11),
  INFO_WARRANTY         VARCHAR2(255 BYTE),
  INFO_MAKE             VARCHAR2(255 BYTE),
  INFO_MODEL            VARCHAR2(255 BYTE),
  INFO_SERIAL_MAKER     VARCHAR2(255 BYTE),
  INFO_SERIAL_INTERNAL  VARCHAR2(255 BYTE),
  INFO_LOCATION         VARCHAR2(255 BYTE),
  INFO_COST             NUMBER(11),
  INFO_RUNNING_COST     NUMBER(11),
  DATA_FILES            CLOB
);


CREATE TABLE SYND_INV_LEASE
(
  NODE_ID             VARCHAR2(64 BYTE),
  PARENT_NODE_ID      VARCHAR2(64 BYTE)         NOT NULL,
  CREATE_NODE_ID      VARCHAR2(64 BYTE),
  UPDATE_NODE_ID      VARCHAR2(64 BYTE),
  CLIENT_NODE_ID      VARCHAR2(64 BYTE)         NOT NULL,
  COSTCENTER_NODE_ID  VARCHAR2(64 BYTE),
  PROJECT_NODE_ID     VARCHAR2(64 BYTE),
  RECEIPT_NODE_ID     VARCHAR2(64 BYTE),
  TS_CREATE           NUMBER(11),
  TS_UPDATE           NUMBER(11),
  TS_EXPIRE           NUMBER(11),
  TS_TERMINATED       NUMBER(11),
  INFO_BODY           CLOB
);


CREATE TABLE SYND_INV_LEASE_SLD
(
  LEASE_NODE_ID   VARCHAR2(64 BYTE)             NOT NULL,
  SLD_NODE_ID     VARCHAR2(64 BYTE)             NOT NULL,
  CREATE_NODE_ID  VARCHAR2(64 BYTE)             NOT NULL,
  TS_CREATE       NUMBER(11)                    NOT NULL,
  TS_TERMINATED   NUMBER(11)
);


CREATE TABLE SYND_INV_LICENSE
(
  NODE_ID            VARCHAR2(64 BYTE),
  PARENT_NODE_ID     VARCHAR2(64 BYTE)          NOT NULL,
  CREATE_NODE_ID     VARCHAR2(64 BYTE),
  UPDATE_NODE_ID     VARCHAR2(64 BYTE),
  TS_CREATE          NUMBER(11),
  TS_UPDATE          NUMBER(11),
  INFO_MAKE          VARCHAR2(512 BYTE),
  INFO_PRODUCT       VARCHAR2(512 BYTE),
  INFO_DESC          CLOB,
  INFO_COST          NUMBER(11),
  INFO_LICENSES      NUMBER(11)                 DEFAULT 0                     NOT NULL,
  FLAG_SITE_LICENSE  NUMBER(1)                  DEFAULT 0                     NOT NULL
);


CREATE TABLE SYND_INV_LICENSE_FOLDER
(
  LICENSE_NODE_ID  VARCHAR2(64 BYTE),
  FOLDER_NODE_ID   VARCHAR2(64 BYTE)
);


CREATE TABLE SYND_INV_LICENSE_SOFTWARE
(
  LICENSE_NODE_ID  VARCHAR2(64 BYTE),
  INFO_FILTER      VARCHAR2(512 BYTE)
);


CREATE TABLE SYND_INV_NIC
(
  NODE_ID                VARCHAR2(64 BYTE),
  PARENT_NODE_ID         VARCHAR2(64 BYTE)      NOT NULL,
  INFO_MAC_ADDRESS       VARCHAR2(17 BYTE),
  INFO_HEAD              VARCHAR2(255 BYTE),
  INFO_LAST_SEEN         NUMBER(11),
  INFO_LAST_SWITCH       VARCHAR2(64 BYTE),
  INFO_LAST_SWITCH_PORT  VARCHAR2(64 BYTE),
  INFO_LAST_VLAN         VARCHAR2(64 BYTE)
);


CREATE TABLE SYND_INV_OS
(
  NODE_ID              VARCHAR2(64 BYTE),
  PARENT_NODE_ID       VARCHAR2(64 BYTE)        NOT NULL,
  TS_CREATE            NUMBER(11),
  TS_UPDATE            NUMBER(11),
  INFO_IDENTIFIER      VARCHAR2(512 BYTE),
  INFO_RELEASE         VARCHAR2(512 BYTE),
  INFO_VERSION         VARCHAR2(512 BYTE),
  INFO_SOFTWARE_HASH   VARCHAR2(32 BYTE),
  INFO_MACHINE_NAME    VARCHAR2(512 BYTE),
  INFO_LOADED_IMAGE    VARCHAR2(512 BYTE),
  INFO_ANTIVIRUS_NAME  VARCHAR2(512 BYTE),
  INFO_ANTIVIRUS_DATE  VARCHAR2(512 BYTE)
);


CREATE TABLE SYND_INV_PERIPHERAL
(
  NODE_ID         VARCHAR2(64 BYTE),
  PARENT_NODE_ID  VARCHAR2(64 BYTE)             NOT NULL,
  INFO_COST       NUMBER(11),
  INFO_DESC       VARCHAR2(2000 BYTE)
);


CREATE TABLE SYND_INV_SLD
(
  NODE_ID         VARCHAR2(64 BYTE),
  PARENT_NODE_ID  VARCHAR2(64 BYTE),
  CREATE_NODE_ID  VARCHAR2(64 BYTE),
  UPDATE_NODE_ID  VARCHAR2(64 BYTE),
  TS_CREATE       NUMBER(11),
  TS_UPDATE       NUMBER(11),
  INFO_HEAD       VARCHAR2(255 BYTE),
  INFO_DESC       CLOB,
  INFO_URI        VARCHAR2(1024 BYTE)
);


CREATE TABLE SYND_INV_SOFTWARE
(
  OS_NODE_ID    VARCHAR2(64 BYTE),
  INFO_PRODUCT  VARCHAR2(512 BYTE),
  INFO_VERSION  VARCHAR2(512 BYTE),
  INFO_STATE    VARCHAR2(512 BYTE)
);


CREATE TABLE SYND_INV_USED
(
  NODE_ID         VARCHAR2(64 BYTE),
  PARENT_NODE_ID  VARCHAR2(64 BYTE),
  CHILD_NODE_ID   VARCHAR2(64 BYTE),
  CREATE_NODE_ID  VARCHAR2(64 BYTE),
  UPDATE_NODE_ID  VARCHAR2(64 BYTE),
  TS_CREATE       NUMBER(11),
  TS_UPDATE       NUMBER(11),
  TS_EXPIRE       NUMBER(11)                    DEFAULT NULL
);


CREATE TABLE SYND_INV_VLAN
(
  NODE_ID         VARCHAR2(64 BYTE),
  PARENT_NODE_ID  VARCHAR2(64 BYTE)             NOT NULL,
  INFO_HEAD       VARCHAR2(255 BYTE)            NOT NULL,
  INFO_DESC       CLOB
);


CREATE TABLE SYND_INV_VLAN_NETWORK
(
  NODE_ID               VARCHAR2(64 BYTE),
  PARENT_NODE_ID        VARCHAR2(64 BYTE)       NOT NULL,
  INFO_NETWORK_ADDRESS  VARCHAR2(15 BYTE)       NOT NULL,
  INFO_NETWORK_MASK     VARCHAR2(15 BYTE)       NOT NULL,
  INFO_ENCODED_NET      NUMBER(11)              NOT NULL,
  INFO_ENCODED_MASK     NUMBER(11)              NOT NULL
);


CREATE TABLE SYND_ISSUE
(
  NODE_ID             VARCHAR2(64 BYTE),
  ISSUE_NODE_ID       VARCHAR2(64 BYTE),
  PARENT_NODE_ID      VARCHAR2(64 BYTE)         NOT NULL,
  CREATE_NODE_ID      VARCHAR2(255 BYTE),
  UPDATE_NODE_ID      VARCHAR2(255 BYTE),
  ASSIGNED_NODE_ID    VARCHAR2(64 BYTE),
  CLIENT_NODE_ID      VARCHAR2(255 BYTE),
  TS_CREATE           NUMBER(11)                DEFAULT 0                     NOT NULL,
  TS_UPDATE           NUMBER(11)                DEFAULT 0                     NOT NULL,
  TS_ASSIGNED         NUMBER(11),
  TS_START            NUMBER(11),
  TS_RESOLVE          NUMBER(11),
  TS_RESOLVE_BY       NUMBER(11),
  INFO_ISSUE_ID       NUMBER(11)                NOT NULL,
  INFO_STATUS         NUMBER(4)                 DEFAULT 0                     NOT NULL,
  INFO_PRIO           NUMBER(4)                 DEFAULT 1                     NOT NULL,
  INFO_HEAD           VARCHAR2(255 BYTE)        NOT NULL,
  INFO_ESTIMATE       NUMBER(11)                DEFAULT NULL,
  INFO_PRIVATE_KEY    VARCHAR2(32 BYTE),
  INFO_INITIAL_QUERY  VARCHAR2(255 BYTE)        DEFAULT NULL,
  DATA_CONTENT        CLOB,
  DATA_FILES          CLOB,
  DATA_NOTIFIER       CLOB,
  DATA_EVENTLOG       CLOB,
  DATA_ATTRIBUTES     CLOB
);


CREATE TABLE SYND_ISSUE_FEEDBACK
(
  ISSUE_NODE_ID         VARCHAR2(64 BYTE)       NOT NULL,
  AUTHENTICATION_TOKEN  VARCHAR2(32 BYTE),
  INFO_RATING           NUMBER(4)               DEFAULT 0                     NOT NULL,
  TS_CREATE             NUMBER                  NOT NULL
);


CREATE TABLE SYND_ISSUE_INVOICE
(
  NODE_ID              VARCHAR2(64 BYTE),
  LEASE_NODE_ID        VARCHAR2(64 BYTE),
  RECEIPT_NODE_ID      VARCHAR2(64 BYTE),
  TS_PAID              NUMBER(11),
  INFO_AMOUNT_TAXED    NUMBER(11)               DEFAULT 0                     NOT NULL,
  INFO_AMOUNT_UNTAXED  NUMBER(11)               DEFAULT 0                     NOT NULL,
  INFO_INVOICE_NUMBER  VARCHAR2(64 BYTE)
);


CREATE TABLE SYND_ISSUE_KEYWORD
(
  KEYWORD_NODE_ID  VARCHAR2(64 BYTE),
  ISSUE_NODE_ID    VARCHAR2(64 BYTE),
  CREATE_NODE_ID   VARCHAR2(64 BYTE),
  TS_CREATE        NUMBER(11)
);


CREATE TABLE SYND_ISSUE_LEASING
(
  ISSUE_NODE_ID    VARCHAR2(64 BYTE)            NOT NULL,
  LEASING_NODE_ID  VARCHAR2(64 BYTE)            NOT NULL
);


CREATE TABLE SYND_ISSUE_REPAIR
(
  NODE_ID           VARCHAR2(64 BYTE)           NOT NULL,
  FLAG_NO_WARRANTY  NUMBER(1)                   DEFAULT 0                     NOT NULL
);


CREATE TABLE SYND_ISSUE_REPLACED
(
  NODE_ID              VARCHAR2(64 BYTE),
  REPLACEMENT_NODE_ID  VARCHAR2(64 BYTE)
);


CREATE TABLE SYND_ISSUE_TASK
(
  NODE_ID         VARCHAR2(64 BYTE),
  PARENT_NODE_ID  VARCHAR2(64 BYTE)             NOT NULL,
  CREATE_NODE_ID  VARCHAR2(255 BYTE),
  UPDATE_NODE_ID  VARCHAR2(255 BYTE),
  TS_CREATE       NUMBER(11)                    DEFAULT NULL,
  TS_UPDATE       NUMBER(11)                    DEFAULT NULL,
  INFO_DURATION   NUMBER(11)                    DEFAULT NULL,
  FLAG_PROTECTED  NUMBER(1)                     DEFAULT 0                     NOT NULL,
  DATA_CONTENT    CLOB,
  DATA_FILES      CLOB
);


CREATE TABLE SYND_KEYWORD
(
  NODE_ID         VARCHAR2(64 BYTE),
  PARENT_NODE_ID  VARCHAR2(64 BYTE),
  INFO_HEAD       VARCHAR2(255 BYTE)            NOT NULL,
  INFO_DESC       VARCHAR2(2000 BYTE)
);


CREATE TABLE SYND_LOCALE_GRAM
(
  LOCALE     VARCHAR2(32 BYTE)                  NOT NULL,
  GRAM       VARCHAR2(32 BYTE)                  NOT NULL,
  FREQUENCY  NUMBER(11)                         DEFAULT 1                     NOT NULL
);


CREATE TABLE SYND_LOCALE_STRING
(
  LID       VARCHAR2(32 BYTE),
  LOCATION  VARCHAR2(255 BYTE),
  STRING    VARCHAR2(4000 BYTE)
);


CREATE TABLE SYND_LOCALE_TRANSLATION
(
  LID          VARCHAR2(32 BYTE),
  LOCALE       VARCHAR2(32 BYTE),
  TRANSLATION  VARCHAR2(4000 BYTE)
);


CREATE TABLE SYND_LOG
(
  HASH            VARCHAR2(32 BYTE),
  TIMESTAMP       NUMBER(11),
  FILENAME        VARCHAR2(512 BYTE),
  LINE            NUMBER(11),
  STATUS          NUMBER(11),
  CODE            NUMBER(11),
  MESSAGE         VARCHAR2(4000 BYTE),
  DESCRIPTION     VARCHAR2(4000 BYTE),
  CONTEXT         CLOB,
  STACKTRACE      CLOB,
  CLIENT_NODE_ID  VARCHAR2(512 BYTE),
  REQUEST_URI     VARCHAR2(512 BYTE),
  REQUEST_DATA    CLOB,
  REQUEST_ENV     CLOB
);


CREATE TABLE SYND_NODE
(
  NODE_ID         VARCHAR2(64 BYTE)             NOT NULL,
  TS_CREATE       NUMBER(11),
  TS_UPDATE       NUMBER(11),
  PARENT_NODE_ID  VARCHAR2(64 BYTE),
  CREATE_NODE_ID  VARCHAR2(64 BYTE),
  UPDATE_NODE_ID  VARCHAR2(64 BYTE),
  FLAG_MODERATE   NUMBER(1)                     DEFAULT 0                     NOT NULL,
  FLAG_PROMOTE    NUMBER(1)                     DEFAULT 0                     NOT NULL,
  FLAG_PINGBACKS  NUMBER(1)                     DEFAULT 0                     NOT NULL,
  INFO_LANG       VARCHAR2(64 BYTE),
  DATA_PINGS      CLOB
);


CREATE TABLE SYND_NODE_FILE
(
  NODE_ID      VARCHAR2(64 BYTE),
  INFO_WEIGHT  NUMBER(11)                       DEFAULT 0                     NOT NULL,
  INFO_HEAD    VARCHAR2(512 BYTE),
  INFO_DESC    VARCHAR2(4000 BYTE),
  DATA_FILE    CLOB,
  DATA_IMAGE   CLOB
);


CREATE TABLE SYND_NODE_PAGE
(
  NODE_ID          VARCHAR2(64 BYTE)            NOT NULL,
  INFO_PAGE_ID     VARCHAR2(64 BYTE),
  INFO_KEYWORDS    VARCHAR2(1024 BYTE),
  INFO_HEAD        VARCHAR2(1024 BYTE),
  INFO_DESC        CLOB,
  INFO_BODY        CLOB,
  INFO_WEIGHT      NUMBER(11)                   DEFAULT 0                     NOT NULL,
  FLAG_PROGRESS    NUMBER(1)                    DEFAULT 0                     NOT NULL,
  FLAG_DIAGNOSTIC  NUMBER(1)                    DEFAULT 0                     NOT NULL
);


CREATE TABLE SYND_NODE_USER
(
  NODE_ID      VARCHAR2(64 BYTE),
  USERNAME     VARCHAR2(255 BYTE),
  PASSWORD     VARCHAR2(32 BYTE)                NOT NULL,
  TS_LOGIN     NUMBER(11),
  TS_ACTIVITY  NUMBER(11),
  INFO_EMAIL   VARCHAR2(255 BYTE),
  INFO_HEAD    VARCHAR2(255 BYTE),
  INFO_DESC    CLOB,
  INFO_BODY    CLOB,
  INFO_PHOTO   CLOB
);


CREATE TABLE SYND_PLAN_BUDGETED
(
  NODE_ID           VARCHAR2(64 BYTE),
  RESOURCE_NODE_ID  VARCHAR2(64 BYTE),
  PROJECT_NODE_ID   VARCHAR2(64 BYTE)           NOT NULL,
  PERIOD_NODE_ID    VARCHAR2(64 BYTE)           NOT NULL,
  INFO_AMOUNT       NUMBER(11)                  NOT NULL
);


CREATE TABLE SYND_PLAN_PERIOD
(
  NODE_ID         VARCHAR2(64 BYTE),
  PARENT_NODE_ID  VARCHAR2(64 BYTE)             NOT NULL,
  TS_START        NUMBER(11)                    NOT NULL,
  TS_STOP         NUMBER(11)                    NOT NULL
);


CREATE TABLE SYND_PLAN_PERSON
(
  NODE_ID      VARCHAR2(64 BYTE),
  INFO_PHONE   VARCHAR2(512 BYTE),
  INFO_EMAIL   VARCHAR2(512 BYTE),
  INFO_HANDLE  VARCHAR2(512 BYTE)
);


CREATE TABLE SYND_PLAN_REPORTED
(
  NODE_ID          VARCHAR2(64 BYTE),
  PROJECT_NODE_ID  VARCHAR2(64 BYTE)            NOT NULL,
  TS_START         NUMBER(11)                   NOT NULL,
  TS_STOP          NUMBER(11)                   NOT NULL
);


CREATE TABLE SYND_PLAN_RESOURCE
(
  NODE_ID           VARCHAR2(64 BYTE),
  PARENT_NODE_ID    VARCHAR2(64 BYTE)           NOT NULL,
  CREATE_NODE_ID    VARCHAR2(64 BYTE),
  UPDATE_NODE_ID    VARCHAR2(64 BYTE),
  TS_CREATE         NUMBER(11),
  TS_UPDATE         NUMBER(11),
  INFO_HEAD         VARCHAR2(512 BYTE),
  INFO_DESC         CLOB,
  INFO_HOURLY_RATE  NUMBER(11)                  DEFAULT 0                     NOT NULL
);


CREATE TABLE SYND_POLL
(
  NODE_ID          VARCHAR2(64 BYTE),
  PARENT_NODE_ID   VARCHAR2(64 BYTE),
  CREATE_NODE_ID   VARCHAR2(64 BYTE),
  UPDATE_NODE_ID   VARCHAR2(64 BYTE),
  TS_CREATE        NUMBER(11),
  TS_UPDATE        NUMBER(11),
  PAGE_NODE_ID     VARCHAR2(64 BYTE),
  ERROR_NODE_ID    VARCHAR2(64 BYTE),
  CONFIRM_NODE_ID  VARCHAR2(64 BYTE),
  TS_START         NUMBER(11),
  TS_STOP          NUMBER(11),
  INFO_REDIRECT    VARCHAR2(512 BYTE),
  FLAG_PROMOTE     NUMBER(1)                    DEFAULT 0                     NOT NULL,
  FLAG_ANONYMOUS   NUMBER(1)                    DEFAULT 0                     NOT NULL
);


CREATE TABLE SYND_PROJECT
(
  NODE_ID                  VARCHAR2(64 BYTE),
  PARENT_NODE_ID           VARCHAR2(64 BYTE)    DEFAULT 'null.issue'          NOT NULL,
  CREATE_NODE_ID           VARCHAR2(64 BYTE),
  UPDATE_NODE_ID           VARCHAR2(64 BYTE),
  TS_CREATE                NUMBER(11),
  TS_UPDATE                NUMBER(11),
  INFO_PROJECT_ID          VARCHAR2(255 BYTE),
  INFO_PROJECT_NUMBER      VARCHAR2(255 BYTE),
  INFO_COST_CENTER         VARCHAR2(255 BYTE),
  INFO_HEAD                VARCHAR2(255 BYTE),
  INFO_DESC                CLOB,
  INFO_EMAIL               VARCHAR2(255 BYTE),
  INFO_DEFAULT_CLIENT      VARCHAR2(255 BYTE),
  INFO_DEFAULT_RESOLVE     VARCHAR2(64 BYTE)    DEFAULT '+7 days'             NOT NULL,
  FLAG_INHERIT_MEMBERS     NUMBER(1)            DEFAULT 1                     NOT NULL,
  FLAG_INHERIT_CATEGORIES  NUMBER(1)            DEFAULT 1                     NOT NULL,
  FLAG_DISPLAY_SENDER      NUMBER(1)            DEFAULT 1                     NOT NULL,
  FLAG_ISSUE_SENDER        NUMBER(1)            DEFAULT 1                     NOT NULL,
  FLAG_DISCARD_SPAM        NUMBER(1)            DEFAULT 1                     NOT NULL,
  FLAG_HIDE_ISSUES         NUMBER(1)            DEFAULT 0                     NOT NULL,
  FLAG_RECEIPT             NUMBER(1)            DEFAULT 1                     NOT NULL,
  FLAG_ARCHIVE             NUMBER(1)            DEFAULT 0                     NOT NULL,
  DATA_ATTRIBUTES          CLOB,
  DATA_NOTIFIER            CLOB
);


CREATE TABLE SYND_PROJECT_MAPPING
(
  PROJECT_NODE_ID   VARCHAR2(64 BYTE)           NOT NULL,
  CUSTOMER_NODE_ID  VARCHAR2(64 BYTE)           NOT NULL,
  QUERY             VARCHAR2(255 BYTE)          NOT NULL
);


CREATE TABLE SYND_PROJECT_MEMBER
(
  PARENT_NODE_ID  VARCHAR2(64 BYTE)             NOT NULL,
  CHILD_NODE_ID   VARCHAR2(64 BYTE)             NOT NULL
);


CREATE TABLE SYND_PROJECT_TEMPLATE
(
  PROJECT_NODE_ID  VARCHAR2(64 BYTE),
  TEMPLATE_ID      VARCHAR2(64 BYTE),
  LOCALE           VARCHAR2(32 BYTE)            DEFAULT 'en',
  DATA_CONTENTS    CLOB
);


CREATE TABLE SYND_QUESTION
(
  NODE_ID                     VARCHAR2(64 BYTE),
  PARENT_NODE_ID              VARCHAR2(64 BYTE),
  UPDATE_NODE_ID              VARCHAR2(64 BYTE),
  TS_UPDATE                   NUMBER(11),
  INFO_WEIGHT                 NUMBER(11)        DEFAULT 0                     NOT NULL,
  INFO_THRESHOLD              NUMBER(11)        DEFAULT 1                     NOT NULL,
  INFO_LAYOUT                 VARCHAR2(32 BYTE) NOT NULL,
  INFO_QUESTION               CLOB,
  INFO_CORRECT_ANSWER         CLOB,
  INFO_CORRECT_EXPLANATION    VARCHAR2(4000 BYTE),
  INFO_INCORRECT_EXPLANATION  VARCHAR2(4000 BYTE),
  FLAG_DIAGNOSTIC             NUMBER(1)         DEFAULT 0                     NOT NULL,
  FLAG_PROGRESS               NUMBER(1)         DEFAULT 0                     NOT NULL,
  FLAG_CASE_SENSITIVE         NUMBER(1)         DEFAULT 1                     NOT NULL
);


CREATE TABLE SYND_QUESTION_OPTION
(
  OPTION_NODE_ID    VARCHAR2(64 BYTE),
  QUESTION_NODE_ID  VARCHAR2(64 BYTE),
  INFO_OPTION       VARCHAR2(2000 BYTE),
  INFO_WEIGHT       NUMBER(11)                  DEFAULT 0                     NOT NULL
);


CREATE TABLE SYND_RELATION
(
  NODE_ID              VARCHAR2(64 BYTE),
  PARENT_NODE_ID       VARCHAR2(255 BYTE)       NOT NULL,
  CHILD_NODE_ID        VARCHAR2(255 BYTE)       NOT NULL,
  TS_CREATE            NUMBER(11)               NOT NULL,
  TS_UPDATE            NUMBER(11)               NOT NULL,
  FLAG_CASCADE_DELETE  NUMBER(1)                DEFAULT 0                     NOT NULL,
  FLAG_CASCADE_PERMS   NUMBER(1)                DEFAULT 0                     NOT NULL,
  INFO_WEIGHT          NUMBER(11)               DEFAULT 0                     NOT NULL
);


CREATE TABLE SYND_SEARCH_ATTRIBUTE
(
  DOCID      NUMBER(11)                         NOT NULL,
  ATTRIBUTE  VARCHAR2(255 BYTE)
);


CREATE TABLE SYND_SEARCH_COSINE
(
  DOCID   NUMBER(11)                            NOT NULL,
  WEIGHT  NUMBER(6),
  MAXWDF  NUMBER(6)
);


CREATE TABLE SYND_SEARCH_DOCUMENT
(
  DOCID     NUMBER(11)                          NOT NULL,
  PAGEID    VARCHAR2(1024 BYTE)                 NOT NULL,
  SECTION   VARCHAR2(255 BYTE)                  NOT NULL,
  MODIFIED  NUMBER(11)                          DEFAULT 0                     NOT NULL,
  NDL       NUMBER(6,3)                         DEFAULT 1                     NOT NULL,
  LENGTH    NUMBER(6)                           DEFAULT 1                     NOT NULL,
  RANK      NUMBER(6)                           DEFAULT 1                     NOT NULL,
  LINKS     NUMBER(4)                           DEFAULT 1                     NOT NULL
);


CREATE TABLE SYND_SEARCH_FIELD
(
  FIELD    NUMBER(4)                            NOT NULL,
  DOCID    NUMBER(11)                           NOT NULL,
  CONTENT  VARCHAR2(10 BYTE)                    NOT NULL
);


CREATE TABLE SYND_SEARCH_LINK
(
  TARGET  NUMBER(11)                            NOT NULL,
  SOURCE  NUMBER(11)                            NOT NULL
);


CREATE TABLE SYND_SEARCH_NUMERIC
(
  TERMID  NUMBER(11)                            NOT NULL,
  DOCID   NUMBER(11)                            NOT NULL,
  TERM    NUMBER(38)                            NOT NULL
);


CREATE TABLE SYND_SEARCH_QUEUE
(
  NAMESPACE  VARCHAR2(64 BYTE)                  NOT NULL,
  NODE_ID    VARCHAR2(64 BYTE),
  BACKENDS   NUMBER(4)                          DEFAULT 0                     NOT NULL
);


CREATE TABLE SYND_SEARCH_SPIDER
(
  DOCID  NUMBER(11)                             NOT NULL,
  URI    VARCHAR2(1024 BYTE)                    NOT NULL
);


CREATE TABLE SYND_SEARCH_TERM
(
  TERMID    NUMBER(11)                          NOT NULL,
  TERM      VARCHAR2(32 BYTE),
  ORIGINAL  VARCHAR2(32 BYTE),
  FUZZY     VARCHAR2(8 BYTE),
  N         NUMBER(11)                          DEFAULT 1                     NOT NULL
);


CREATE TABLE SYND_SEARCH_TERMINDEX
(
  TERMID   NUMBER(11)                           NOT NULL,
  DOCID    NUMBER(11)                           NOT NULL,
  CONTEXT  NUMBER(6)                            DEFAULT 0                     NOT NULL,
  FIELD    NUMBER(4)                            DEFAULT 0                     NOT NULL,
  WDF      NUMBER(4)                            DEFAULT 1                     NOT NULL,
  WDW      NUMBER(4)                            DEFAULT 255                   NOT NULL
);


CREATE TABLE SYND_SEARCH_TEXTINDEX
(
  DOCID  NUMBER(11)                             NOT NULL,
  TEXT   VARCHAR2(4000 BYTE)
);


CREATE TABLE SYND_SEARCH_WEBPAGE
(
  DOCID     NUMBER(11)                          NOT NULL,
  HASH      NUMBER(11)                          NOT NULL,
  MODIFIED  NUMBER(11)                          NOT NULL,
  REVISIT   NUMBER(11)                          NOT NULL,
  TTL       NUMBER(11)                          NOT NULL,
  DOCLEN    NUMBER(11)                          NOT NULL,
  FLAGS     NUMBER(3)                           NOT NULL,
  URI       VARCHAR2(1024 BYTE)                 NOT NULL,
  TITLE     VARCHAR2(255 BYTE)                  NOT NULL,
  CONTENT   VARCHAR2(4000 BYTE)                 NOT NULL
);


CREATE TABLE SYND_SESSION
(
  SID        VARCHAR2(32 BYTE),
  REFRESHED  NUMBER                             NOT NULL,
  CONTENT    CLOB
);


CREATE TABLE SYND_SSO_INSTANCE
(
  SID      VARCHAR2(32 BYTE),
  SERVICE  VARCHAR2(512 BYTE)
);


CREATE TABLE SYND_SSO_SESSION
(
  SID           VARCHAR2(32 BYTE),
  USER_NODE_ID  VARCHAR2(64 BYTE)               NOT NULL,
  TS_LOGIN      NUMBER(11)                      NOT NULL
);


CREATE TABLE SYND_STORAGE_DEVICE
(
  DEVID        NUMBER(6)                        NOT NULL,
  NSID         NUMBER(6)                        NOT NULL,
  URN          VARCHAR2(512 BYTE)               NOT NULL,
  SPACE_TOTAL  NUMBER(20)                       NOT NULL,
  SPACE_USED   NUMBER(20)                       DEFAULT 0                     NOT NULL,
  FAILED       NUMBER(11)                       DEFAULT 0
);


CREATE TABLE SYND_STORAGE_LOB
(
  LOBID     NUMBER(20)                          NOT NULL,
  NSID      NUMBER(6)                           NOT NULL,
  VARIABLE  VARCHAR2(512 BYTE)                  NOT NULL,
  CHECKSUM  VARCHAR2(32 BYTE)                   NOT NULL,
  SPACE     NUMBER(11)                          NOT NULL,
  CREATED   NUMBER(11)                          NOT NULL,
  MODIFIED  NUMBER(11)                          NOT NULL,
  REPLICAS  NUMBER(4)                           DEFAULT 2                     NOT NULL,
  DELETED   NUMBER(1)                           DEFAULT 0                     NOT NULL
);


CREATE TABLE SYND_STORAGE_NAMESPACE
(
  NSID       NUMBER(6)                          NOT NULL,
  NAMESPACE  VARCHAR2(512 BYTE)                 NOT NULL
);


CREATE TABLE SYND_STORAGE_REPLICA
(
  DEVID     NUMBER(6)                           NOT NULL,
  LOBID     NUMBER(20)                          NOT NULL,
  CHECKSUM  VARCHAR2(32 BYTE)                   NOT NULL
);


CREATE TABLE SYND_UNIT_TEST
(
  NODE_ID         VARCHAR2(64 BYTE),
  PARENT_NODE_ID  VARCHAR2(64 BYTE),
  SEQUENCE_ID     NUMBER(11)                    NOT NULL
);


CREATE TABLE SYND_UNIT_TEST2
(
  NODE_ID    VARCHAR2(64 BYTE),
  INFO_HEAD  VARCHAR2(255 BYTE)                 DEFAULT 'Test',
  INFO_DESC  CLOB
);


CREATE TABLE SYND_VARIABLE
(
  NAMESPACE  VARCHAR2(64 BYTE),
  VARIABLE   VARCHAR2(64 BYTE),
  EXPIRES    NUMBER(11),
  VALUE      CLOB
);


CREATE TABLE SYND_WORKFLOW
(
  NODE_ID            VARCHAR2(64 BYTE),
  PARENT_NODE_ID     VARCHAR2(64 BYTE)          NOT NULL,
  CREATE_NODE_ID     VARCHAR2(64 BYTE),
  UPDATE_NODE_ID     VARCHAR2(64 BYTE),
  TS_CREATE          NUMBER(11),
  TS_UPDATE          NUMBER(11),
  FLAG_PROTOTYPE     NUMBER(1)                  DEFAULT 1                     NOT NULL,
  FLAG_CONTEXT_MENU  NUMBER(1)                  DEFAULT 0                     NOT NULL,
  FLAG_SIDEBAR_MENU  NUMBER(1)                  DEFAULT 0                     NOT NULL,
  INFO_ACCESSKEY     VARCHAR2(1 BYTE),
  INFO_HEAD          VARCHAR2(255 BYTE)         NOT NULL,
  INFO_DESC          CLOB,
  DATA_ACTIVITY      CLOB
);


CREATE TABLE SYND_WORKFLOW_EVENT
(
  PARENT_NODE_ID  VARCHAR2(64 BYTE),
  EVENT           VARCHAR2(64 BYTE)
);


CREATE INDEX SYND_ACCESS_I01 ON SYND_ACCESS
(NODE);


CREATE UNIQUE INDEX SYND_ACCESS_PK ON SYND_ACCESS
(ROLE, NODE, PERM);


CREATE UNIQUE INDEX SYND_ACCESS_INHERIT_PK ON SYND_ACCESS_INHERIT
(NODE, PERM);


CREATE UNIQUE INDEX SYND_ACCESS_ROLE_PK ON SYND_ACCESS_ROLE
(NODE_ID);


CREATE UNIQUE INDEX SYND_ALIAS_PK ON SYND_ALIAS
(SOURCE, TARGET);


CREATE INDEX SYND_ANSWER_OPTION_I01 ON SYND_ANSWER_OPTION
(OPTION_NODE_ID, ATTEMPT_NODE_ID);


CREATE UNIQUE INDEX SYND_ANSWER_OPTION_PK ON SYND_ANSWER_OPTION
(ATTEMPT_NODE_ID, OPTION_NODE_ID);


CREATE INDEX SYND_ANSWER_TEXT_I01 ON SYND_ANSWER_TEXT
(QUESTION_NODE_ID);


CREATE UNIQUE INDEX SYND_PAGE_ANSWER_PK ON SYND_ANSWER_TEXT
(ATTEMPT_NODE_ID, QUESTION_NODE_ID);


CREATE INDEX SYND_ATTEMPT_I01 ON SYND_ATTEMPT
(CLIENT_NODE_ID, PARENT_NODE_ID);


CREATE UNIQUE INDEX SYND_ATTEMPT_PK ON SYND_ATTEMPT
(NODE_ID);


CREATE UNIQUE INDEX SYND_ATTEMPT_QUESTIONS_PK ON SYND_ATTEMPT_QUESTIONS
(ATTEMPT_NODE_ID, QUESTION_NODE_ID);


CREATE UNIQUE INDEX SYND_CLASS_FIELDS_I01 ON SYND_CLASS_FIELDS
(CLASS_NODE_ID, INFO_HEAD, INFO_DATATYPE);


CREATE INDEX SYND_COMMENT_I01 ON SYND_COMMENT
(PARENT_NODE_ID);


CREATE UNIQUE INDEX SYND_COMMENT_PK ON SYND_COMMENT
(NODE_ID);


CREATE UNIQUE INDEX SYND_COSTCENTER_PK ON SYND_COSTCENTER
(NODE_ID);


CREATE INDEX SYND_COURSE_I01 ON SYND_COURSE
(INFO_COURSE_ID);


CREATE UNIQUE INDEX SYND_PAGE_COURSE_PK ON SYND_COURSE
(NODE_ID);


CREATE INDEX SYND_CRYPTO_IDENTITY_I01 ON SYND_CRYPTO_IDENTITY
(KID);


CREATE INDEX SYND_CRYPTO_IDENTITY_I02 ON SYND_CRYPTO_IDENTITY
(INFO_EMAIL);


CREATE UNIQUE INDEX SYND_CRYPTO_KEY_PK ON SYND_CRYPTO_KEY
(KID);


CREATE UNIQUE INDEX SYND_CRYPTO_KEY_U01 ON SYND_CRYPTO_KEY
(PROJECT_NODE_ID, KEYID);


CREATE INDEX SYND_CRYPTO_KEY_I01 ON SYND_CRYPTO_KEY
(KEYID);


CREATE INDEX SYND_CRYPTO_KEY_I02 ON SYND_CRYPTO_KEY
(FINGERPRINT);


CREATE UNIQUE INDEX SYND_GROUP_PK ON SYND_GROUP
(NODE_ID);


CREATE UNIQUE INDEX SYND_INSTANCE_PK ON SYND_INSTANCE
(NODE_ID);


CREATE UNIQUE INDEX SYND_INV_COMPUTER_PK ON SYND_INV_COMPUTER
(NODE_ID);


CREATE UNIQUE INDEX SYND_INV_CONFIG_PK ON SYND_INV_CONFIG
(NODE_ID);


CREATE UNIQUE INDEX SYND_INV_CONFIG_I01 ON SYND_INV_CONFIG
(PARENT_NODE_ID);


CREATE UNIQUE INDEX SYND_INV_FOLDER_PK ON SYND_INV_FOLDER
(NODE_ID);


CREATE UNIQUE INDEX SYND_INV_ASSET_PK ON SYND_INV_INSTALLATION
(NODE_ID);


CREATE UNIQUE INDEX SYND_INV_INSTALLATION_I01 ON SYND_INV_INSTALLATION
(INFO_NUMBER);


CREATE UNIQUE INDEX SYND_INV_INTERFACE_PK ON SYND_INV_INTERFACE
(NODE_ID);


CREATE UNIQUE INDEX SYND_INV_INTERFACE_HOST_I01 ON SYND_INV_INTERFACE
(INFO_HOSTNAME);


CREATE UNIQUE INDEX SYND_INV_INTERFACE_I02 ON SYND_INV_INTERFACE
(INFO_IP_ADDRESS);


CREATE UNIQUE INDEX SYND_INV_INTERFACE_I03 ON SYND_INV_INTERFACE
(NIC_NODE_ID);


CREATE INDEX SYND_INV_INTERFACE_I01 ON SYND_INV_INTERFACE
(PARENT_NODE_ID);


CREATE UNIQUE INDEX SYND_INV_ITEM_PK ON SYND_INV_ITEM
(NODE_ID);


CREATE INDEX SYND_INV_LEASE_I01 ON SYND_INV_LEASE
(PARENT_NODE_ID);


CREATE UNIQUE INDEX SYND_INV_LEASE_PK ON SYND_INV_LEASE
(NODE_ID);


CREATE INDEX SYND_INV_LEASE_SLD_I01 ON SYND_INV_LEASE_SLD
(TS_CREATE, TS_TERMINATED);


CREATE UNIQUE INDEX SYND_INV_LEASE_SLD_PK ON SYND_INV_LEASE_SLD
(LEASE_NODE_ID, SLD_NODE_ID);


CREATE INDEX SYND_INV_LICENSE_I01 ON SYND_INV_LICENSE
(PARENT_NODE_ID);


CREATE UNIQUE INDEX SYND_INVENTORY_LICENSE_PK ON SYND_INV_LICENSE
(NODE_ID);


CREATE UNIQUE INDEX SYND_INV_LICENSE_FOLDER_PK ON SYND_INV_LICENSE_FOLDER
(LICENSE_NODE_ID, FOLDER_NODE_ID);


CREATE UNIQUE INDEX SYND_INV_LICENSE_SOFTWARE_PK ON SYND_INV_LICENSE_SOFTWARE
(LICENSE_NODE_ID, INFO_FILTER);


CREATE INDEX SYND_INV_NIC_I01 ON SYND_INV_NIC
(PARENT_NODE_ID);


CREATE UNIQUE INDEX SYND_INV_NIC_PK ON SYND_INV_NIC
(NODE_ID);


CREATE UNIQUE INDEX SYND_INV_NIC_MAC_I01 ON SYND_INV_NIC
(INFO_MAC_ADDRESS);


CREATE UNIQUE INDEX SYND_INV_OS_PK ON SYND_INV_OS
(NODE_ID);


CREATE UNIQUE INDEX SYND_INV_PERIPHERAL_PK ON SYND_INV_PERIPHERAL
(NODE_ID);


CREATE UNIQUE INDEX SYND_INV_SLD_PK ON SYND_INV_SLD
(NODE_ID);


CREATE INDEX SYND_INV_SLD_I01 ON SYND_INV_SLD
(PARENT_NODE_ID);


CREATE INDEX SYND_INV_SOFTWARE_I01 ON SYND_INV_SOFTWARE
(INFO_PRODUCT);


CREATE UNIQUE INDEX SYND_INV_SOFTWARE_PK ON SYND_INV_SOFTWARE
(OS_NODE_ID, INFO_PRODUCT, INFO_VERSION);


CREATE INDEX SYND_INV_USED_I01 ON SYND_INV_USED
(PARENT_NODE_ID, TS_EXPIRE);


CREATE INDEX SYND_INV_LEASED_ITEM_I01 ON SYND_INV_USED
(CHILD_NODE_ID, TS_EXPIRE);


CREATE UNIQUE INDEX SYND_INV_LEASED_PK ON SYND_INV_USED
(NODE_ID);


CREATE UNIQUE INDEX SYND_INV_VLAN_PK ON SYND_INV_VLAN
(NODE_ID);


CREATE UNIQUE INDEX SYND_INV_VLAN_NETWORK_PK ON SYND_INV_VLAN_NETWORK
(NODE_ID);


CREATE UNIQUE INDEX SYND_INV_VLAN_NETWORK_I01 ON SYND_INV_VLAN_NETWORK
(INFO_NETWORK_ADDRESS);


CREATE UNIQUE INDEX SYND_ISSUE_I01 ON SYND_ISSUE
(INFO_ISSUE_ID);


CREATE INDEX SYND_ISSUE_I05 ON SYND_ISSUE
(ISSUE_NODE_ID);


CREATE INDEX SYND_ISSUE_I04 ON SYND_ISSUE
(CLIENT_NODE_ID, INFO_STATUS, TS_RESOLVE);


CREATE INDEX SYND_ISSUE_I02 ON SYND_ISSUE
(PARENT_NODE_ID, INFO_STATUS, TS_CREATE);


CREATE INDEX SYND_ISSUE_I03 ON SYND_ISSUE
(ASSIGNED_NODE_ID, INFO_STATUS);


CREATE INDEX SYND_ISSUE_I06 ON SYND_ISSUE
(CREATE_NODE_ID);


CREATE INDEX SYND_ISSUE_I07 ON SYND_ISSUE
(UPDATE_NODE_ID);


CREATE UNIQUE INDEX SYND_ISSUE_PK ON SYND_ISSUE
(NODE_ID);


CREATE UNIQUE INDEX SYND_ISSUE_FEEDBACK_PK ON SYND_ISSUE_FEEDBACK
(ISSUE_NODE_ID, AUTHENTICATION_TOKEN);


CREATE UNIQUE INDEX SYND_ISSUE_INVOICE_PK ON SYND_ISSUE_INVOICE
(NODE_ID);


CREATE UNIQUE INDEX SYND_ISSUE_INVOICE_I01 ON SYND_ISSUE_INVOICE
(INFO_INVOICE_NUMBER);


CREATE INDEX SYND_ISSUE_KEYWORD_I01 ON SYND_ISSUE_KEYWORD
(ISSUE_NODE_ID);


CREATE INDEX SYND_ISSUE_KEYWORD_I02 ON SYND_ISSUE_KEYWORD
(TS_CREATE, CREATE_NODE_ID);


CREATE UNIQUE INDEX SYND_ISSUE_KEYWORD_PK ON SYND_ISSUE_KEYWORD
(KEYWORD_NODE_ID, ISSUE_NODE_ID);


CREATE UNIQUE INDEX SYND_ISSUE_LEASING_PK ON SYND_ISSUE_LEASING
(ISSUE_NODE_ID, LEASING_NODE_ID);


CREATE UNIQUE INDEX SYND_ISSUE_REPAIR_PK ON SYND_ISSUE_REPAIR
(NODE_ID);


CREATE UNIQUE INDEX SYND_ISSUE_REPLACED_PK ON SYND_ISSUE_REPLACED
(NODE_ID);


CREATE UNIQUE INDEX SYND_ISSUE_TASK_PK ON SYND_ISSUE_TASK
(NODE_ID);


CREATE INDEX SYND_ISSUE_TASK_I01 ON SYND_ISSUE_TASK
(PARENT_NODE_ID);


CREATE INDEX SYND_ISSUE_TASK_I02 ON SYND_ISSUE_TASK
(CREATE_NODE_ID, TS_CREATE);


CREATE UNIQUE INDEX SYND_KEYWORD_PK ON SYND_KEYWORD
(NODE_ID);


CREATE INDEX SYND_KEYWORD_I01 ON SYND_KEYWORD
(PARENT_NODE_ID);


CREATE UNIQUE INDEX SYND_LOCALE_STRING_PK ON SYND_LOCALE_STRING
(LID);


CREATE UNIQUE INDEX SYND_LOCALE_TRANSLATION_PK ON SYND_LOCALE_TRANSLATION
(LID, LOCALE);


CREATE UNIQUE INDEX SYND_LOG_PK ON SYND_LOG
(HASH);


CREATE INDEX SYND_NODE_I01 ON SYND_NODE
(PARENT_NODE_ID);


CREATE UNIQUE INDEX SYND_NODE_PK ON SYND_NODE
(NODE_ID);


CREATE UNIQUE INDEX SYND_NODE_FILE_PK ON SYND_NODE_FILE
(NODE_ID);


CREATE UNIQUE INDEX SYND_NODE_PAGE_PK ON SYND_NODE_PAGE
(NODE_ID);


CREATE UNIQUE INDEX SYND_NODE_PAGE_I01 ON SYND_NODE_PAGE
(INFO_PAGE_ID);


CREATE UNIQUE INDEX SYND_NODE_USER_PK ON SYND_NODE_USER
(NODE_ID);


CREATE UNIQUE INDEX SYND_NODE_USER_I01 ON SYND_NODE_USER
(USERNAME);


CREATE INDEX SYND_PLAN_BUDGETED_I01 ON SYND_PLAN_BUDGETED
(PERIOD_NODE_ID);


CREATE UNIQUE INDEX SYND_PLAN_BUDGETED_PK ON SYND_PLAN_BUDGETED
(NODE_ID);


CREATE INDEX SYND_PLAN_PERIOD_I01 ON SYND_PLAN_PERIOD
(PARENT_NODE_ID);


CREATE UNIQUE INDEX SYND_PLAN_PERIOD_PK ON SYND_PLAN_PERIOD
(NODE_ID);


CREATE UNIQUE INDEX SYND_PLAN_PERSON_PK ON SYND_PLAN_PERSON
(NODE_ID);


CREATE INDEX SYND_PLAN_REPORTED_I01 ON SYND_PLAN_REPORTED
(PROJECT_NODE_ID);


CREATE UNIQUE INDEX SYND_PLAN_REPORTED_PK ON SYND_PLAN_REPORTED
(NODE_ID);


CREATE INDEX SYND_PLAN_RESOURCE_I01 ON SYND_PLAN_RESOURCE
(PARENT_NODE_ID);


CREATE UNIQUE INDEX SYND_PLAN_RESOURCE_PK ON SYND_PLAN_RESOURCE
(NODE_ID);


CREATE INDEX SYND_POLL_I01 ON SYND_POLL
(TS_START, TS_STOP);


CREATE UNIQUE INDEX SYND_POLL_PK ON SYND_POLL
(NODE_ID);


CREATE INDEX SYND_PROJECT_I01 ON SYND_PROJECT
(PARENT_NODE_ID);


CREATE INDEX SYND_PROJECT_I02 ON SYND_PROJECT
(FLAG_HIDE_ISSUES);


CREATE UNIQUE INDEX SYND_PROJECT_PK ON SYND_PROJECT
(NODE_ID);


CREATE UNIQUE INDEX SYND_PROJECT_U01 ON SYND_PROJECT
(INFO_PROJECT_ID);


CREATE INDEX SYND_PROJECT_MAPPING_I01 ON SYND_PROJECT_MAPPING
(QUERY);


CREATE UNIQUE INDEX SYND_PROJECT_MAPPING_PK ON SYND_PROJECT_MAPPING
(PROJECT_NODE_ID, CUSTOMER_NODE_ID, QUERY);


CREATE UNIQUE INDEX SYND_PROJECT_MEMBER_PK ON SYND_PROJECT_MEMBER
(PARENT_NODE_ID, CHILD_NODE_ID);


CREATE UNIQUE INDEX SYND_PROJECT_TEMPLATE_PK ON SYND_PROJECT_TEMPLATE
(PROJECT_NODE_ID, TEMPLATE_ID, LOCALE);


CREATE UNIQUE INDEX SYND_QUESTION_PK ON SYND_QUESTION
(NODE_ID);


CREATE INDEX SYND_QUESTION_I01 ON SYND_QUESTION
(PARENT_NODE_ID);


CREATE INDEX SYND_QUESTION_OPTION_I01 ON SYND_QUESTION_OPTION
(QUESTION_NODE_ID, OPTION_NODE_ID);


CREATE UNIQUE INDEX SYND_PAGE_OPTION_PK ON SYND_QUESTION_OPTION
(OPTION_NODE_ID);


CREATE INDEX SYND_RELATION_I01 ON SYND_RELATION
(PARENT_NODE_ID, CHILD_NODE_ID);


CREATE INDEX SYND_RELATION_I02 ON SYND_RELATION
(CHILD_NODE_ID, PARENT_NODE_ID);


CREATE UNIQUE INDEX SYND_RELATION_PK ON SYND_RELATION
(NODE_ID);


CREATE UNIQUE INDEX SYND_SEARCH_ATTRIBUTE_PK ON SYND_SEARCH_ATTRIBUTE
(DOCID, ATTRIBUTE);


CREATE INDEX SYND_SEARCH_COSINE_PK ON SYND_SEARCH_COSINE
(DOCID);


CREATE INDEX SYND_SEARCH_DOCUMENT_PK ON SYND_SEARCH_DOCUMENT
(DOCID);


CREATE INDEX SYND_SEARCH_DOCUMENT_I01 ON SYND_SEARCH_DOCUMENT
(SECTION);


CREATE INDEX SYND_SEARCH_FIELD_PK ON SYND_SEARCH_FIELD
(FIELD, DOCID);


CREATE INDEX SYND_SEARCH_LINK_PK ON SYND_SEARCH_LINK
(TARGET, SOURCE);


CREATE INDEX SYND_SEARCH_NUMERIC_PK ON SYND_SEARCH_NUMERIC
(TERMID, DOCID);


CREATE INDEX SYND_SEARCH_NUMERIC_I01 ON SYND_SEARCH_NUMERIC
(TERM);


CREATE INDEX SYND_SEARCH_SPIDER_PK ON SYND_SEARCH_SPIDER
(DOCID);


CREATE INDEX SYND_SEARCH_TERM_PK ON SYND_SEARCH_TERM
(TERMID);


CREATE INDEX SYND_SEARCH_TERM_I01 ON SYND_SEARCH_TERM
(TERM);


CREATE INDEX SYND_SEARCH_TERM_I02 ON SYND_SEARCH_TERM
(FUZZY);


CREATE INDEX SYND_SEARCH_TERMINDEX_PK ON SYND_SEARCH_TERMINDEX
(TERMID, DOCID);


CREATE INDEX SYND_SEARCH_TERMINDEX_I01 ON SYND_SEARCH_TERMINDEX
(DOCID);


CREATE INDEX SYND_SEARCH_TEXTINDEX_PK ON SYND_SEARCH_TEXTINDEX
(DOCID);


CREATE INDEX SYND_SEARCH_WEBPAGE_PK ON SYND_SEARCH_WEBPAGE
(DOCID);


CREATE INDEX SYND_SEARCH_WEBPAGE_I01 ON SYND_SEARCH_WEBPAGE
(HASH);


CREATE INDEX SYND_SEARCH_WEBPAGE_I02 ON SYND_SEARCH_WEBPAGE
(REVISIT);


CREATE UNIQUE INDEX SYND_SESSION_PK ON SYND_SESSION
(SID);


CREATE UNIQUE INDEX SYND_SSO_INSTANCE_PK ON SYND_SSO_INSTANCE
(SID, SERVICE);


CREATE UNIQUE INDEX SYND_SSO_SESSION_PK ON SYND_SSO_SESSION
(SID);


CREATE UNIQUE INDEX SYND_STORAGE_DEVICE_PK ON SYND_STORAGE_DEVICE
(DEVID);


CREATE UNIQUE INDEX SYND_STORAGE_DEVICE_U01 ON SYND_STORAGE_DEVICE
(NSID, URN);


CREATE UNIQUE INDEX SYND_STORAGE_LOB_PK ON SYND_STORAGE_LOB
(LOBID);


CREATE UNIQUE INDEX SYND_STORAGE_LOB_U01 ON SYND_STORAGE_LOB
(NSID, VARIABLE);


CREATE UNIQUE INDEX SYND_STORAGE_NAMESPACE_PK ON SYND_STORAGE_NAMESPACE
(NSID);


CREATE UNIQUE INDEX SYND_STORAGE_NAMESPACE_U01 ON SYND_STORAGE_NAMESPACE
(NAMESPACE);


CREATE UNIQUE INDEX SYND_STORAGE_REPLICA_PK ON SYND_STORAGE_REPLICA
(DEVID, LOBID);


CREATE UNIQUE INDEX SYND_UNIT_TEST_PK ON SYND_UNIT_TEST
(NODE_ID);


CREATE UNIQUE INDEX SYND_UNIT_TEST_I01 ON SYND_UNIT_TEST
(SEQUENCE_ID);


CREATE UNIQUE INDEX SYND_UNIT_TEST2_PK ON SYND_UNIT_TEST2
(NODE_ID);


CREATE UNIQUE INDEX SYND_VARIABLE_PK ON SYND_VARIABLE
(NAMESPACE, VARIABLE);

CREATE INDEX SYND_VARIABLE_I01 ON SYND_VARIABLE
(EXPIRES);

CREATE UNIQUE INDEX SYND_WORKFLOW_PK ON SYND_WORKFLOW
(NODE_ID);


CREATE INDEX SYND_WORKFLOW_I01 ON SYND_WORKFLOW
(PARENT_NODE_ID);


CREATE UNIQUE INDEX SYND_WORKFLOW_EVENT_PK ON SYND_WORKFLOW_EVENT
(PARENT_NODE_ID, EVENT);


CREATE OR REPLACE TRIGGER "SYND_STORAGE_NAMESPACE_T01" 
BEFORE INSERT ON "SYND_STORAGE_NAMESPACE" FOR EACH ROW
DECLARE 
    nextid SYND_STORAGE_NAMESPACE.NSID%TYPE; 
BEGIN 
    IF :NEW.NSID IS NULL THEN
      SELECT SYND_STORAGE_NAMESPACE_S01.NEXTVAL INTO nextid FROM Dual; 
      :NEW.NSID := nextid; 
    END IF;
END;
/
SHOW ERRORS;



CREATE OR REPLACE TRIGGER "SYND_STORAGE_DEVICE_T01" 
BEFORE INSERT ON "SYND_STORAGE_DEVICE" FOR EACH ROW
DECLARE 
    nextid SYND_STORAGE_DEVICE.DEVID%TYPE; 
BEGIN 
    IF :NEW.DEVID IS NULL THEN
      SELECT SYND_STORAGE_DEVICE_S01.NEXTVAL INTO nextid FROM Dual; 
      :NEW.DEVID := nextid; 
    END IF;
END;
/
SHOW ERRORS;



CREATE OR REPLACE TRIGGER "SYND_STORAGE_LOB_T01"  
BEFORE INSERT ON "SYND_STORAGE_LOB" FOR EACH ROW
DECLARE 
    nextid SYND_STORAGE_LOB.LOBID%TYPE; 
BEGIN 
    IF :NEW.LOBID IS NULL THEN
      SELECT SYND_STORAGE_LOB_S01.NEXTVAL INTO nextid FROM Dual; 
      :NEW.LOBID := nextid;
    END IF;
END;
/
SHOW ERRORS;



CREATE OR REPLACE TRIGGER SYND_UNIT_TEST_T01 
BEFORE INSERT ON SYND_UNIT_TEST FOR EACH ROW
DECLARE
    nextid SYND_UNIT_TEST.SEQUENCE_ID%TYPE;
BEGIN
    IF :NEW.SEQUENCE_ID IS NULL THEN
      SELECT SYND_UNIT_TEST_S01.NEXTVAL INTO nextid FROM Dual;
      :NEW.SEQUENCE_ID := nextid;
    END IF;
END;
/
SHOW ERRORS;



ALTER TABLE SYND_ACCESS ADD (
  CONSTRAINT SYND_ACCESS_PK
 PRIMARY KEY
 (ROLE, NODE, PERM));


ALTER TABLE SYND_ACCESS_INHERIT ADD (
  CONSTRAINT SYND_ACCESS_INHERIT_PK
 PRIMARY KEY
 (NODE, PERM));


ALTER TABLE SYND_ACCESS_ROLE ADD (
  CONSTRAINT SYND_ACCESS_ROLE_PK
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_ALIAS ADD (
  CONSTRAINT SYND_ALIAS_PK
 PRIMARY KEY
 (SOURCE, TARGET));


ALTER TABLE SYND_ANSWER_OPTION ADD (
  CONSTRAINT PK_SYND_ANSWER_OPTION
 PRIMARY KEY
 (ATTEMPT_NODE_ID, OPTION_NODE_ID));


ALTER TABLE SYND_ANSWER_TEXT ADD (
  CONSTRAINT PK_SYND_PAGE_ANSWER
 PRIMARY KEY
 (ATTEMPT_NODE_ID, QUESTION_NODE_ID));


ALTER TABLE SYND_ATTEMPT ADD (
  CONSTRAINT PK_SYND_ATTEMPT
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_ATTEMPT_QUESTIONS ADD (
  CONSTRAINT PK_SYND_ATTEMPT_QUESTIONS
 PRIMARY KEY
 (ATTEMPT_NODE_ID, QUESTION_NODE_ID));


ALTER TABLE SYND_CLASS ADD (
  PRIMARY KEY
 (NODE_ID));

ALTER TABLE SYND_CLASS ADD (
  UNIQUE (NAME));


ALTER TABLE SYND_CLASS_FIELDS ADD (
  PRIMARY KEY
 (FIELD_ID));


ALTER TABLE SYND_CLASS_VALUES ADD (
  PRIMARY KEY
 (NODE_ID, FIELD_ID));


ALTER TABLE SYND_COMMENT ADD (
  CONSTRAINT PK_SYND_COMMENT
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_COSTCENTER ADD (
  CONSTRAINT PK_SYND_COSTCENTER
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_COURSE ADD (
  CONSTRAINT PK_SYND_PAGE_COURSE
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_CRYPTO_KEY ADD (
  CONSTRAINT SYND_CRYPTO_KEY_PK
 PRIMARY KEY
 (KID));

ALTER TABLE SYND_CRYPTO_KEY ADD (
  CONSTRAINT SYND_CRYPTO_KEY_U01
 UNIQUE (PROJECT_NODE_ID, KEYID));


ALTER TABLE SYND_GROUP ADD (
  CONSTRAINT SYND_GROUP_PK
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_INSTANCE ADD (
  CHECK ("CLASS_NODE_ID" IS NOT NULL) DISABLE);

ALTER TABLE SYND_INSTANCE ADD (
  CONSTRAINT SYND_INSTANCE_PK
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_INV_COMPUTER ADD (
  CONSTRAINT SYND_INV_COMPUTER_PK
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_INV_CONFIG ADD (
  CONSTRAINT PK_SYND_INV_CONFIGURATION
 PRIMARY KEY
 (NODE_ID));

ALTER TABLE SYND_INV_CONFIG ADD (
  CONSTRAINT IDX_SYND_INV_CONFIGURATION
 UNIQUE (PARENT_NODE_ID));


ALTER TABLE SYND_INV_FOLDER ADD (
  CONSTRAINT PK_SYND_INV_FOLDER
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_INV_INSTALLATION ADD (
  CONSTRAINT PK_SYND_INV_ASSET
 PRIMARY KEY
 (NODE_ID));

ALTER TABLE SYND_INV_INSTALLATION ADD (
  CONSTRAINT KEY_SYND_INV_INSTALLATION
 UNIQUE (INFO_NUMBER));


ALTER TABLE SYND_INV_INTERFACE ADD (
  CONSTRAINT PK_SYND_INV_INTERFACE
 PRIMARY KEY
 (NODE_ID));

ALTER TABLE SYND_INV_INTERFACE ADD (
  CONSTRAINT KEY_SYND_INV_INTERFACE_NIC
 UNIQUE (NIC_NODE_ID));

ALTER TABLE SYND_INV_INTERFACE ADD (
  CONSTRAINT KEY_SYND_INV_INTERFACE_IP
 UNIQUE (INFO_IP_ADDRESS));

ALTER TABLE SYND_INV_INTERFACE ADD (
  CONSTRAINT KEY_SYND_INV_INTERFACE_HOST
 UNIQUE (INFO_HOSTNAME));


ALTER TABLE SYND_INV_ITEM ADD (
  CONSTRAINT SYND_INV_ITEM_PK
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_INV_LEASE ADD (
  CONSTRAINT SYND_INV_LEASE_PK
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_INV_LEASE_SLD ADD (
  CONSTRAINT PK_SYND_INV_LEASE_SLD
 PRIMARY KEY
 (LEASE_NODE_ID, SLD_NODE_ID));


ALTER TABLE SYND_INV_LICENSE ADD (
  CONSTRAINT PK_SYND_INVENTORY_LICENSE
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_INV_LICENSE_FOLDER ADD (
  CONSTRAINT PK_SYND_INV_LICENSE_FOLDER
 PRIMARY KEY
 (LICENSE_NODE_ID, FOLDER_NODE_ID));


ALTER TABLE SYND_INV_LICENSE_SOFTWARE ADD (
  CONSTRAINT PK_SYND_INV_LICENSE_SOFTWARE
 PRIMARY KEY
 (LICENSE_NODE_ID, INFO_FILTER));


ALTER TABLE SYND_INV_NIC ADD (
  CONSTRAINT PK_SYND_INV_NIC
 PRIMARY KEY
 (NODE_ID));

ALTER TABLE SYND_INV_NIC ADD (
  CONSTRAINT KEY_SYND_INV_NIC_MAC
 UNIQUE (INFO_MAC_ADDRESS));


ALTER TABLE SYND_INV_OS ADD (
  CONSTRAINT PK_SYND_INV_OS
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_INV_PERIPHERAL ADD (
  CONSTRAINT PK_SYND_INV_PERIPHERAL
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_INV_SLD ADD (
  CONSTRAINT SYND_INV_SLD_PK
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_INV_SOFTWARE ADD (
  CONSTRAINT PK_SYND_INV_SOFTWARE
 PRIMARY KEY
 (OS_NODE_ID, INFO_PRODUCT, INFO_VERSION));


ALTER TABLE SYND_INV_USED ADD (
  CONSTRAINT PK_SYND_INV_LEASED
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_INV_VLAN ADD (
  CONSTRAINT PK_SYND_INV_VLAN
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_INV_VLAN_NETWORK ADD (
  CONSTRAINT PK_SYND_INV_VLAN_NETWORK
 PRIMARY KEY
 (NODE_ID));

ALTER TABLE SYND_INV_VLAN_NETWORK ADD (
  CONSTRAINT KEY_SYND_INV_VLAN_NETWORK
 UNIQUE (INFO_NETWORK_ADDRESS));


ALTER TABLE SYND_ISSUE ADD (
  CONSTRAINT SYND_ISSUE_PK
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_ISSUE_FEEDBACK ADD (
  CONSTRAINT PK_SYND_ISSUE_FEEDBACK
 PRIMARY KEY
 (ISSUE_NODE_ID, AUTHENTICATION_TOKEN));


ALTER TABLE SYND_ISSUE_INVOICE ADD (
  CONSTRAINT PK_SYND_ISSUE_INVOICE
 PRIMARY KEY
 (NODE_ID));

ALTER TABLE SYND_ISSUE_INVOICE ADD (
  CONSTRAINT KEY_SYND_ISSUE_INVOICE_NUMBER
 UNIQUE (INFO_INVOICE_NUMBER));


ALTER TABLE SYND_ISSUE_KEYWORD ADD (
  CONSTRAINT SYND_ISSUE_KEYWORD_PK
 PRIMARY KEY
 (KEYWORD_NODE_ID, ISSUE_NODE_ID));


ALTER TABLE SYND_ISSUE_LEASING ADD (
  CONSTRAINT SYND_ISSUE_LEASING_PK
 PRIMARY KEY
 (ISSUE_NODE_ID, LEASING_NODE_ID));


ALTER TABLE SYND_ISSUE_REPAIR ADD (
  CONSTRAINT SYND_ISSUE_REPAIR_PK
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_ISSUE_REPLACED ADD (
  CONSTRAINT PK_SYND_ISSUE_REPLACED
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_ISSUE_TASK ADD (
  CONSTRAINT SYND_ISSUE_TASK_PK
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_KEYWORD ADD (
  CONSTRAINT PK_SYND_KEYWORD
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_LOCALE_STRING ADD (
  CONSTRAINT PK_SYND_LOCALE_STRING
 PRIMARY KEY
 (LID));


ALTER TABLE SYND_LOCALE_TRANSLATION ADD (
  CONSTRAINT PK_SYND_LOCALE_TRANSLATION
 PRIMARY KEY
 (LID, LOCALE));


ALTER TABLE SYND_LOG ADD (
  CONSTRAINT SYND_LOG_PK
 PRIMARY KEY
 (HASH));


ALTER TABLE SYND_NODE ADD (
  CONSTRAINT PK_SYND_NODE
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_NODE_FILE ADD (
  CONSTRAINT PK_SYND_NODE_FILE
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_NODE_PAGE ADD (
  CONSTRAINT PK_SYND_NODE_PAGE
 PRIMARY KEY
 (NODE_ID));

ALTER TABLE SYND_NODE_PAGE ADD (
  CONSTRAINT KEY_SYND_NODE_PAGE_ID
 UNIQUE (INFO_PAGE_ID));


ALTER TABLE SYND_NODE_USER ADD (
  CONSTRAINT PK_SYND_NODE_USER
 PRIMARY KEY
 (NODE_ID));

ALTER TABLE SYND_NODE_USER ADD (
  CONSTRAINT KEY_SYND_NODE_USER_USERNAME
 UNIQUE (USERNAME));


ALTER TABLE SYND_PLAN_BUDGETED ADD (
  CONSTRAINT PK_SYND_PLAN_BUDGETED
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_PLAN_PERIOD ADD (
  CONSTRAINT PK_SYND_PLAN_PERIOD
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_PLAN_PERSON ADD (
  CONSTRAINT PK_SYND_PLAN_PERSON
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_PLAN_REPORTED ADD (
  CONSTRAINT PK_SYND_PLAN_REPORTED
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_PLAN_RESOURCE ADD (
  CONSTRAINT PK_SYND_PLAN_RESOURCE
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_POLL ADD (
  CONSTRAINT SYND_POLL_PK
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_PROJECT ADD (
  CONSTRAINT SYND_PROJECT_PK
 PRIMARY KEY
 (NODE_ID));

ALTER TABLE SYND_PROJECT ADD (
  CONSTRAINT SYND_PROJECT_U01
 UNIQUE (INFO_PROJECT_ID));


ALTER TABLE SYND_PROJECT_MAPPING ADD (
  CONSTRAINT SYND_PROJECT_MAPPING_PK
 PRIMARY KEY
 (PROJECT_NODE_ID, CUSTOMER_NODE_ID, QUERY));


ALTER TABLE SYND_PROJECT_MEMBER ADD (
  CONSTRAINT SYND_PROJECT_MEMBER_PK
 PRIMARY KEY
 (PARENT_NODE_ID, CHILD_NODE_ID));


ALTER TABLE SYND_PROJECT_TEMPLATE ADD (
  CONSTRAINT SYND_PROJECT_TEMPLATE_PK
 PRIMARY KEY
 (PROJECT_NODE_ID, TEMPLATE_ID, LOCALE));


ALTER TABLE SYND_QUESTION ADD (
  CONSTRAINT SYND_QUESTION_PK
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_QUESTION_OPTION ADD (
  CONSTRAINT PK_SYND_PAGE_OPTION
 PRIMARY KEY
 (OPTION_NODE_ID));


ALTER TABLE SYND_RELATION ADD (
  CONSTRAINT PK_SYND_RELATION
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_SEARCH_ATTRIBUTE ADD (
  CONSTRAINT SYND_SEARCH_ATTRIBUTE_PK
 PRIMARY KEY
 (DOCID, ATTRIBUTE));


ALTER TABLE SYND_SEARCH_COSINE ADD (
  CONSTRAINT SYND_SEARCH_COSINE_PK
 PRIMARY KEY
 (DOCID)
    DEFERRABLE INITIALLY DEFERRED);


ALTER TABLE SYND_SEARCH_DOCUMENT ADD (
  CONSTRAINT SYND_SEARCH_DOCUMENT_PK
 PRIMARY KEY
 (DOCID)
    DEFERRABLE INITIALLY DEFERRED);


ALTER TABLE SYND_SEARCH_FIELD ADD (
  CONSTRAINT SYND_SEARCH_FIELD_PK
 PRIMARY KEY
 (FIELD, DOCID)
    DEFERRABLE INITIALLY DEFERRED);


ALTER TABLE SYND_SEARCH_LINK ADD (
  CONSTRAINT SYND_SEARCH_LINK_PK
 PRIMARY KEY
 (TARGET, SOURCE)
    DEFERRABLE INITIALLY DEFERRED);


ALTER TABLE SYND_SEARCH_NUMERIC ADD (
  CONSTRAINT SYND_SEARCH_NUMERIC_PK
 PRIMARY KEY
 (TERMID, DOCID)
    DEFERRABLE INITIALLY DEFERRED);


ALTER TABLE SYND_SEARCH_SPIDER ADD (
  CONSTRAINT SYND_SEARCH_SPIDER_PK
 PRIMARY KEY
 (DOCID)
    DEFERRABLE INITIALLY DEFERRED);


ALTER TABLE SYND_SEARCH_TERM ADD (
  CONSTRAINT SYND_SEARCH_TERM_PK
 PRIMARY KEY
 (TERMID)
    DEFERRABLE INITIALLY DEFERRED);


ALTER TABLE SYND_SEARCH_TERMINDEX ADD (
  CONSTRAINT SYND_SEARCH_TERMINDEX_PK
 PRIMARY KEY
 (TERMID, DOCID)
    DEFERRABLE INITIALLY DEFERRED);


ALTER TABLE SYND_SEARCH_TEXTINDEX ADD (
  CONSTRAINT SYND_SEARCH_TEXTINDEX_PK
 PRIMARY KEY
 (DOCID)
    DEFERRABLE INITIALLY DEFERRED);


ALTER TABLE SYND_SEARCH_WEBPAGE ADD (
  CONSTRAINT SYND_SEARCH_WEBPAGE_PK
 PRIMARY KEY
 (DOCID)
    DEFERRABLE INITIALLY DEFERRED);


ALTER TABLE SYND_SESSION ADD (
  CONSTRAINT SYND_SESSION_PK
 PRIMARY KEY
 (SID));


ALTER TABLE SYND_SSO_INSTANCE ADD (
  CONSTRAINT PK_SYND_SSO_INSTANCE
 PRIMARY KEY
 (SID, SERVICE));


ALTER TABLE SYND_SSO_SESSION ADD (
  CONSTRAINT PK_SYND_SSO_SESSION
 PRIMARY KEY
 (SID));


ALTER TABLE SYND_STORAGE_DEVICE ADD (
  CONSTRAINT SYND_STORAGE_DEVICE_PK
 PRIMARY KEY
 (DEVID));

ALTER TABLE SYND_STORAGE_DEVICE ADD (
  CONSTRAINT SYND_STORAGE_DEVICE_U01
 UNIQUE (NSID, URN));


ALTER TABLE SYND_STORAGE_LOB ADD (
  CONSTRAINT SYND_STORAGE_LOB_PK
 PRIMARY KEY
 (LOBID));

ALTER TABLE SYND_STORAGE_LOB ADD (
  CONSTRAINT SYND_STORAGE_LOB_U01
 UNIQUE (NSID, VARIABLE));


ALTER TABLE SYND_STORAGE_NAMESPACE ADD (
  CONSTRAINT SYND_STORAGE_NAMESPACE_PK
 PRIMARY KEY
 (NSID));

ALTER TABLE SYND_STORAGE_NAMESPACE ADD (
  CONSTRAINT SYND_STORAGE_NAMESPACE_U01
 UNIQUE (NAMESPACE));


ALTER TABLE SYND_STORAGE_REPLICA ADD (
  CONSTRAINT SYND_STORAGE_REPLICA_PK
 PRIMARY KEY
 (DEVID, LOBID));


ALTER TABLE SYND_UNIT_TEST ADD (
  CONSTRAINT PK_SYND_UNIT_TEST
 PRIMARY KEY
 (NODE_ID));

ALTER TABLE SYND_UNIT_TEST ADD (
  CONSTRAINT KEY_SYND_UNIT_TEST_SEQ
 UNIQUE (SEQUENCE_ID));


ALTER TABLE SYND_UNIT_TEST2 ADD (
  CONSTRAINT PK_SYND_UNIT_TEST2
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_VARIABLE ADD (
  CONSTRAINT SYND_VARIABLE_PK
 PRIMARY KEY
 (NAMESPACE, VARIABLE));


ALTER TABLE SYND_ATTEMPT_QUESTIONS ADD (
  CONSTRAINT FK_SYND_ATTEMPT_QUESTIONS 
 FOREIGN KEY (ATTEMPT_NODE_ID) 
 REFERENCES SYND_ATTEMPT (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_CLASS_FIELDS ADD (
  CONSTRAINT FK_SYND_CLASS_FIELDS 
 FOREIGN KEY (CLASS_NODE_ID) 
 REFERENCES SYND_CLASS (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_CLASS_VALUES ADD (
  CONSTRAINT FK_SYND_CLASS_VALUES 
 FOREIGN KEY (FIELD_ID) 
 REFERENCES SYND_CLASS_FIELDS (FIELD_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_CRYPTO_IDENTITY ADD (
  CONSTRAINT SYND_CRYPTO_IDENTITY_R01 
 FOREIGN KEY (KID) 
 REFERENCES SYND_CRYPTO_KEY (KID)
    ON DELETE CASCADE);


ALTER TABLE SYND_CRYPTO_KEY ADD (
  FOREIGN KEY (PROJECT_NODE_ID) 
 REFERENCES SYND_PROJECT (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_INSTANCE ADD (
  CONSTRAINT SYND_INSTANCE_R01 
 FOREIGN KEY (CLASS_NODE_ID) 
 REFERENCES SYND_CLASS (NODE_ID));


ALTER TABLE SYND_INV_CONFIG ADD (
  CONSTRAINT FK_SYND_INV_CONFIGURATION 
 FOREIGN KEY (PARENT_NODE_ID) 
 REFERENCES SYND_INSTANCE (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_INV_FOLDER ADD (
  CONSTRAINT FK_SYND_INV_FOLDER 
 FOREIGN KEY (NODE_ID) 
 REFERENCES SYND_INSTANCE (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_INV_INTERFACE ADD (
  CONSTRAINT FK_SYND_INV_INTERFACE 
 FOREIGN KEY (PARENT_NODE_ID) 
 REFERENCES SYND_INV_CONFIG (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_INV_ITEM ADD (
  CONSTRAINT SYND_INV_ITEM_R01 
 FOREIGN KEY (NODE_ID) 
 REFERENCES SYND_INSTANCE (NODE_ID)
    ON DELETE CASCADE);

ALTER TABLE SYND_INV_ITEM ADD (
  CONSTRAINT SYND_INV_ITEM_R02 
 FOREIGN KEY (INSTALLATION_NODE_ID) 
 REFERENCES SYND_INV_INSTALLATION (NODE_ID)
    ON DELETE SET NULL);


ALTER TABLE SYND_INV_LEASE_SLD ADD (
  CONSTRAINT SYND_INV_LEASE_SLD_R03 
 FOREIGN KEY (LEASE_NODE_ID) 
 REFERENCES SYND_INV_LEASE (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_INV_LICENSE_FOLDER ADD (
  CONSTRAINT FK_SYND_INV_LICENSE_FOLDER 
 FOREIGN KEY (LICENSE_NODE_ID) 
 REFERENCES SYND_INV_LICENSE (NODE_ID)
    ON DELETE CASCADE);

ALTER TABLE SYND_INV_LICENSE_FOLDER ADD (
  CONSTRAINT FK_SYND_INV_LICENCE_FOLDERS2 
 FOREIGN KEY (FOLDER_NODE_ID) 
 REFERENCES SYND_INV_FOLDER (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_INV_LICENSE_SOFTWARE ADD (
  CONSTRAINT FK_SYND_LICENSE_SOFTWARE 
 FOREIGN KEY (LICENSE_NODE_ID) 
 REFERENCES SYND_INV_LICENSE (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_INV_NIC ADD (
  CONSTRAINT FK_SYND_INV_NIC 
 FOREIGN KEY (PARENT_NODE_ID) 
 REFERENCES SYND_INV_COMPUTER (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_INV_OS ADD (
  CONSTRAINT FK_SYND_INV_OS 
 FOREIGN KEY (PARENT_NODE_ID) 
 REFERENCES SYND_INV_COMPUTER (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_INV_SLD ADD (
  CONSTRAINT SYND_INV_SLD_R01 
 FOREIGN KEY (PARENT_NODE_ID) 
 REFERENCES SYND_INV_FOLDER (NODE_ID));


ALTER TABLE SYND_INV_SOFTWARE ADD (
  CONSTRAINT FK_SYND_INV_SOFTWARE 
 FOREIGN KEY (OS_NODE_ID) 
 REFERENCES SYND_INV_OS (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_INV_USED ADD (
  CONSTRAINT SYND_INV_LEASED_R02 
 FOREIGN KEY (CHILD_NODE_ID) 
 REFERENCES SYND_INV_ITEM (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_INV_VLAN ADD (
  CONSTRAINT FK_SYND_INV_VLAN 
 FOREIGN KEY (PARENT_NODE_ID) 
 REFERENCES SYND_INV_FOLDER (NODE_ID));


ALTER TABLE SYND_INV_VLAN_NETWORK ADD (
  CONSTRAINT FK_SYND_INV_VLAN_NETWORK 
 FOREIGN KEY (PARENT_NODE_ID) 
 REFERENCES SYND_INV_VLAN (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_ISSUE ADD (
  CONSTRAINT SYND_ISSUE_R02 
 FOREIGN KEY (ISSUE_NODE_ID) 
 REFERENCES SYND_ISSUE (NODE_ID)
    ON DELETE SET NULL);


ALTER TABLE SYND_ISSUE_FEEDBACK ADD (
  CONSTRAINT SYND_ISSUE_FEEDBACK_R01 
 FOREIGN KEY (ISSUE_NODE_ID) 
 REFERENCES SYND_ISSUE (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_ISSUE_INVOICE ADD (
  CONSTRAINT SYND_ISSUE_INVOICE_R02 
 FOREIGN KEY (LEASE_NODE_ID) 
 REFERENCES SYND_INV_LEASE (NODE_ID)
    ON DELETE SET NULL);

ALTER TABLE SYND_ISSUE_INVOICE ADD (
  CONSTRAINT SYND_ISSUE_INVOICE_R01 
 FOREIGN KEY (NODE_ID) 
 REFERENCES SYND_ISSUE (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_ISSUE_KEYWORD ADD (
  CONSTRAINT SYND_ISSUE_KEYWORD_R01 
 FOREIGN KEY (ISSUE_NODE_ID) 
 REFERENCES SYND_ISSUE (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_ISSUE_LEASING ADD (
  CONSTRAINT SYND_ISSUE_LEASING_R02 
 FOREIGN KEY (LEASING_NODE_ID) 
 REFERENCES SYND_INV_USED (NODE_ID)
    ON DELETE CASCADE);

ALTER TABLE SYND_ISSUE_LEASING ADD (
  CONSTRAINT SYND_ISSUE_LEASING_R01 
 FOREIGN KEY (ISSUE_NODE_ID) 
 REFERENCES SYND_ISSUE (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_ISSUE_REPAIR ADD (
  CONSTRAINT SYND_ISSUE_REPAIR_R01 
 FOREIGN KEY (NODE_ID) 
 REFERENCES SYND_ISSUE (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_ISSUE_TASK ADD (
  CONSTRAINT SYND_ISSUE_TASK_R01 
 FOREIGN KEY (PARENT_NODE_ID) 
 REFERENCES SYND_ISSUE (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_LOCALE_TRANSLATION ADD (
  CONSTRAINT FK_SYND_LOCALE_TRANSLATION 
 FOREIGN KEY (LID) 
 REFERENCES SYND_LOCALE_STRING (LID)
    ON DELETE CASCADE);


ALTER TABLE SYND_NODE_PAGE ADD (
  CONSTRAINT FK_SYND_NODE_PAGE 
 FOREIGN KEY (NODE_ID) 
 REFERENCES SYND_NODE (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_NODE_USER ADD (
  CONSTRAINT FK_SYND_NODE_USER 
 FOREIGN KEY (NODE_ID) 
 REFERENCES SYND_NODE (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_PLAN_BUDGETED ADD (
  CONSTRAINT SYND_PLAN_BUDGETED_R01 
 FOREIGN KEY (RESOURCE_NODE_ID) 
 REFERENCES SYND_PLAN_RESOURCE (NODE_ID)
    ON DELETE CASCADE);

ALTER TABLE SYND_PLAN_BUDGETED ADD (
  CONSTRAINT SYND_PLAN_BUDGETED 
 FOREIGN KEY (PERIOD_NODE_ID) 
 REFERENCES SYND_PLAN_PERIOD (NODE_ID)
    ON DELETE CASCADE);

ALTER TABLE SYND_PLAN_BUDGETED ADD (
  CONSTRAINT SYND_PAN_BUDGETED_R02 
 FOREIGN KEY (PROJECT_NODE_ID) 
 REFERENCES SYND_PROJECT (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_POLL ADD (
  CONSTRAINT SYND_POLL_R01 
 FOREIGN KEY (PAGE_NODE_ID) 
 REFERENCES SYND_NODE (NODE_ID));

ALTER TABLE SYND_POLL ADD (
  CONSTRAINT SYND_POLL_R02 
 FOREIGN KEY (CONFIRM_NODE_ID) 
 REFERENCES SYND_NODE (NODE_ID));

ALTER TABLE SYND_POLL ADD (
  CONSTRAINT SYND_POLL_R03 
 FOREIGN KEY (ERROR_NODE_ID) 
 REFERENCES SYND_NODE (NODE_ID));


ALTER TABLE SYND_PROJECT_MAPPING ADD (
  CONSTRAINT SYND_PROJECT_MAPPING_SYND_FK1 
 FOREIGN KEY (PROJECT_NODE_ID) 
 REFERENCES SYND_PROJECT (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_PROJECT_MEMBER ADD (
  CONSTRAINT SYND_PROJECT_MEMBER_R01 
 FOREIGN KEY (PARENT_NODE_ID) 
 REFERENCES SYND_PROJECT (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_PROJECT_TEMPLATE ADD (
  CONSTRAINT SYND_PROJECT_TEMPLATE_R01 
 FOREIGN KEY (PROJECT_NODE_ID) 
 REFERENCES SYND_PROJECT (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_QUESTION ADD (
  CONSTRAINT SYND_QUESTION_R01 
 FOREIGN KEY (PARENT_NODE_ID) 
 REFERENCES SYND_NODE (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_QUESTION_OPTION ADD (
  CONSTRAINT FK_SYND_PAGE_OPTION 
 FOREIGN KEY (QUESTION_NODE_ID) 
 REFERENCES SYND_QUESTION (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_SEARCH_ATTRIBUTE ADD (
  CONSTRAINT SYND_SEARCH_ATTRIBUTE_R01 
 FOREIGN KEY (DOCID) 
 REFERENCES SYND_SEARCH_DOCUMENT (DOCID)
    ON DELETE CASCADE);


ALTER TABLE SYND_SEARCH_COSINE ADD (
  CONSTRAINT SYND_SEARCH_COSINE_R01 
 FOREIGN KEY (DOCID) 
 REFERENCES SYND_SEARCH_DOCUMENT (DOCID)
    ON DELETE CASCADE);


ALTER TABLE SYND_SEARCH_FIELD ADD (
  CONSTRAINT SYND_SEARCH_FIELD_R01 
 FOREIGN KEY (DOCID) 
 REFERENCES SYND_SEARCH_DOCUMENT (DOCID)
    ON DELETE CASCADE);


ALTER TABLE SYND_SEARCH_LINK ADD (
  CONSTRAINT SYND_SEARCH_LINK_R01 
 FOREIGN KEY (SOURCE) 
 REFERENCES SYND_SEARCH_DOCUMENT (DOCID)
    ON DELETE CASCADE);

ALTER TABLE SYND_SEARCH_LINK ADD (
  CONSTRAINT SYND_SEARCH_LINK_R02 
 FOREIGN KEY (TARGET) 
 REFERENCES SYND_SEARCH_DOCUMENT (DOCID)
    ON DELETE CASCADE);


ALTER TABLE SYND_SEARCH_NUMERIC ADD (
  CONSTRAINT SYND_SEARCH_NUMERIC_R01 
 FOREIGN KEY (TERMID, DOCID) 
 REFERENCES SYND_SEARCH_TERMINDEX (TERMID,DOCID)
    ON DELETE CASCADE);


ALTER TABLE SYND_SEARCH_TERMINDEX ADD (
  CONSTRAINT SYND_SEARCH_TERMINDEX_R01 
 FOREIGN KEY (TERMID) 
 REFERENCES SYND_SEARCH_TERM (TERMID)
    ON DELETE CASCADE);

ALTER TABLE SYND_SEARCH_TERMINDEX ADD (
  CONSTRAINT SYND_SEARCH_TERMINDEX_R02 
 FOREIGN KEY (DOCID) 
 REFERENCES SYND_SEARCH_DOCUMENT (DOCID)
    ON DELETE CASCADE);


ALTER TABLE SYND_SEARCH_TEXTINDEX ADD (
  CONSTRAINT SYND_SEARCH_TEXTINDEX_R01 
 FOREIGN KEY (DOCID) 
 REFERENCES SYND_SEARCH_DOCUMENT (DOCID)
    ON DELETE CASCADE);


ALTER TABLE SYND_SEARCH_WEBPAGE ADD (
  CONSTRAINT SYND_SEARCH_WEBPAGE_R01 
 FOREIGN KEY (DOCID) 
 REFERENCES SYND_SEARCH_DOCUMENT (DOCID)
    ON DELETE CASCADE);


ALTER TABLE SYND_STORAGE_REPLICA ADD (
  CONSTRAINT SYND_STORAGE_REPLICA_R01 
 FOREIGN KEY (DEVID) 
 REFERENCES SYND_STORAGE_DEVICE (DEVID)
    ON DELETE CASCADE);

ALTER TABLE SYND_STORAGE_REPLICA ADD (
  CONSTRAINT SYND_STORAGE_REPLICA_R02 
 FOREIGN KEY (LOBID) 
 REFERENCES SYND_STORAGE_LOB (LOBID)
    ON DELETE CASCADE);


ALTER TABLE SYND_UNIT_TEST2 ADD (
  CONSTRAINT FK_SYND_UNIT_TEST2 
 FOREIGN KEY (NODE_ID) 
 REFERENCES SYND_UNIT_TEST (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_WORKFLOW ADD (
  CONSTRAINT SYND_WORKFLOW_PK
 PRIMARY KEY
 (NODE_ID));


ALTER TABLE SYND_WORKFLOW_EVENT ADD (
  CONSTRAINT SYND_WORKFLOW_EVENT_PK
 PRIMARY KEY
 (PARENT_NODE_ID, EVENT));


ALTER TABLE SYND_WORKFLOW ADD (
  CONSTRAINT SYND_WORKFLOW_R01 
 FOREIGN KEY (PARENT_NODE_ID) 
 REFERENCES SYND_PROJECT (NODE_ID)
    ON DELETE CASCADE);


ALTER TABLE SYND_WORKFLOW_EVENT ADD (
  CONSTRAINT SYND_WORKFLOW_EVENT_R01 
 FOREIGN KEY (PARENT_NODE_ID) 
 REFERENCES SYND_WORKFLOW (NODE_ID)
    ON DELETE CASCADE);
