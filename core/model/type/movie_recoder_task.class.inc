<?php
require_once 'core/model/type/task.class.inc';

class synd_type_movie_recoder_task extends synd_type_task {
	var $_movie	= null;

	function __construct($movie) {
		parent::__construct();
		$this->_movie = $movie->id();
	}

	function run() {
		parent::run();
		global $synd_config;

		// Get hold of movie object
		if (null !== ($movie = SyndLib::getInstance($this->_movie))) {
			// Create temporary directory
			$dir = $synd_config['dirs']['cache'].'type/movie/'.$movie->nodeId().'/';
			SyndLib::createDirectory($dir);

			// Run mencoder on movie
			if (null == ($mencoder = SyndLib::which('mencoder'))) {
				trigger_error('mencoder does not exist or is not executable', E_USER_ERROR);
				return;
			}
			
			$target = $dir.SyndLib::chopExtension(basename($movie->path())).'.avi';
			$command = "$mencoder -oac copy -ovc lavc -o ".escapeshellarg($target).' '.
				escapeshellarg($movie->path()).' > /dev/null';
			print "Mencoder: $command\n";
			passthru($command);

			if (!file_exists($target))
				print "Error: No file generated by mencoder.\n";
			else if (null == ($thumb = $this->extractThumb($target, $dir))) 
				print "Error: Could not extract frame from '$target'.\n";
			else {	
				print "Result: $target\n";
				$movie->importThumb($thumb);
			}

			SyndLib::unlink($thumb);
			SyndLib::unlink($dir, true);
		}
		else 
			print "Error: No movie with id '$this->_movie' loaded.\n";
	}

	/**
	 * Extracts a frame from a movie using Transcode
	 * @param	string	Path to movie
	 * @param	string	Temporary directory to store frame in
	 * @return	mixed	Thumb path or null on error
	 */
	function extractThumb($movie, $dir) {
		global $synd_config;
		$thumb = "{$dir}frame";

		// Extra flags for mpeg movies
		$flags = null;
		switch (SyndLib::fileExtension($thumb)) {
			case 'mpg':
			case 'mpeg':
				$flags .= ' -x mpeg2,auto';
				break;
		}
		
		// Run transcode on movie to extract frame
		if (null == ($transcode = SyndLib::which('transcode'))) {
			trigger_error('transcode does not exist or is not executable', E_USER_WARNING);
			return null;
		}
		$command = "$transcode $flags -i ".escapeshellarg($movie)." -o ".
			escapeshellarg($thumb)." -z -k -y jpg -c 1";
		print "Transcode: $command\n";
		
		putenv('PATH='.getenv('PATH').':'.dirname($transcode));
		passthru($command);

		// Check if a frame was extracted
		if (!file_exists($thumb = "{$thumb}000000.jpg")) {
			print "Error: No thumb extracted to '$thumb'.\n";
			return null;
		}
		
		print "Thumb: $thumb\n";
		return $thumb;
	}
}
